{"hash":"5dc9536f84fc1d471ba60ee80532e8e829824dc2","fesm2022":[{"exports":["DefaultTreeviewEventParser","DefaultTreeviewI18n","DownlineTreeviewEventParser","DropdownDirective","DropdownToggleDirective","DropdownTreeviewComponent","OrderDownlineTreeviewEventParser","TreeviewComponent","TreeviewConfig","TreeviewEventParser","TreeviewHelper","TreeviewI18n","TreeviewItem","TreeviewModule","TreeviewPipe"],"facadeModuleId":"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/ngx-treeview.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown.directive.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown-menu.directive.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown-toggle.directive.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/helpers/treeview-helper.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-item.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-i18n.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-config.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/helpers/treeview-event-parser.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/treeview-item/treeview-item.component.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/treeview/treeview.component.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/dropdown-treeview/dropdown-treeview.component.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/pipes/treeview.pipe.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/treeview.module.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-item-template-context.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/public-api.mjs","/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/ngx-treeview.mjs"],"name":"ngx-treeview","type":"chunk","dynamicImports":[],"fileName":"ngx-treeview.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["EventEmitter","*","Directive","Input","Output","HostBinding","HostListener","Injectable","Component","ViewChild","Pipe","NgModule"],"@angular/forms":["*","FormsModule"],"@angular/common":["*","CommonModule"],"lodash":["isNil","pull","concat","isString","isBoolean","includes"]},"imports":["@angular/core","@angular/forms","@angular/common","lodash"],"modules":{"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown.directive.mjs":{"code":"class DropdownDirective {\n    toggleElement;\n    internalOpen = false;\n    openChange = new EventEmitter();\n    get isOpen() {\n        return this.internalOpen;\n    }\n    onKeyupEsc() {\n        this.close();\n    }\n    onDocumentClick(event) {\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\n            this.close();\n        }\n    }\n    open() {\n        if (!this.internalOpen) {\n            this.internalOpen = true;\n            this.openChange.emit(true);\n        }\n    }\n    close() {\n        if (this.internalOpen) {\n            this.internalOpen = false;\n            this.openChange.emit(false);\n        }\n    }\n    toggle() {\n        if (this.isOpen) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    }\n    isEventFromToggle(event) {\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n    static ɵfac = function DropdownDirective_Factory(t) { return new (t || DropdownDirective)(); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownDirective, selectors: [[\"\", \"ngxDropdown\", \"\"]], hostVars: 2, hostBindings: function DropdownDirective_HostBindings(rf, ctx) { if (rf & 1) {\n            i0.ɵɵlistener(\"keyup.esc\", function DropdownDirective_keyup_esc_HostBindingHandler() { return ctx.onKeyupEsc(); })(\"click\", function DropdownDirective_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, i0.ɵɵresolveDocument);\n        } if (rf & 2) {\n            i0.ɵɵclassProp(\"show\", ctx.isOpen);\n        } }, inputs: { internalOpen: [\"open\", \"internalOpen\"] }, outputs: { openChange: \"openChange\" }, exportAs: [\"ngxDropdown\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdown]',\n                exportAs: 'ngxDropdown'\n            }]\n    }], null, { internalOpen: [{\n            type: Input,\n            args: ['open']\n        }], openChange: [{\n            type: Output\n        }], isOpen: [{\n            type: HostBinding,\n            args: ['class.show']\n        }], onKeyupEsc: [{\n            type: HostListener,\n            args: ['keyup.esc']\n        }], onDocumentClick: [{\n            type: HostListener,\n            args: ['document:click', ['$event']]\n        }] }); })();","originalLength":6360,"removedExports":[],"renderedExports":["DropdownDirective"],"renderedLength":2378},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown-menu.directive.mjs":{"code":"class DropdownMenuDirective {\n    dropdown;\n    constructor(dropdown) {\n        this.dropdown = dropdown;\n    }\n    static ɵfac = function DropdownMenuDirective_Factory(t) { return new (t || DropdownMenuDirective)(i0.ɵɵdirectiveInject(DropdownDirective)); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownMenuDirective, selectors: [[\"\", \"ngxDropdownMenu\", \"\"]], hostVars: 4, hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) { if (rf & 2) {\n            i0.ɵɵclassProp(\"dropdown-menu\", true)(\"show\", ctx.dropdown.isOpen);\n        } } });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownMenuDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdownMenu]',\n                host: {\n                    '[class.dropdown-menu]': 'true',\n                    '[class.show]': 'dropdown.isOpen'\n                }\n            }]\n    }], function () { return [{ type: DropdownDirective }]; }, null); })();","originalLength":2356,"removedExports":[],"renderedExports":["DropdownMenuDirective"],"renderedLength":1020},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/directives/dropdown-toggle.directive.mjs":{"code":"class DropdownToggleDirective {\n    dropdown;\n    constructor(dropdown, elementRef) {\n        this.dropdown = dropdown;\n        dropdown.toggleElement = elementRef.nativeElement;\n    }\n    static ɵfac = function DropdownToggleDirective_Factory(t) { return new (t || DropdownToggleDirective)(i0.ɵɵdirectiveInject(DropdownDirective), i0.ɵɵdirectiveInject(i0.ElementRef)); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownToggleDirective, selectors: [[\"\", \"ngxDropdownToggle\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\", 1, \"dropdown-toggle\"], hostVars: 1, hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() { return ctx.dropdown.toggle(); });\n        } if (rf & 2) {\n            i0.ɵɵattribute(\"aria-expanded\", ctx.dropdown.isOpen);\n        } } });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownToggleDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdownToggle]',\n                host: {\n                    class: 'dropdown-toggle',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'dropdown.isOpen',\n                    '(click)': 'dropdown.toggle()'\n                }\n            }]\n    }], function () { return [{ type: DropdownDirective }, { type: i0.ElementRef }]; }, null); })();","originalLength":3184,"removedExports":[],"renderedExports":["DropdownToggleDirective"],"renderedLength":1468},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/helpers/treeview-helper.mjs":{"code":"const TreeviewHelper = {\n    findItem,\n    findItemInList,\n    findParent,\n    removeItem,\n    concatSelection\n};\nfunction findItem(root, value) {\n    if (isNil(root)) {\n        return undefined;\n    }\n    if (root.value === value) {\n        return root;\n    }\n    if (root.children) {\n        for (const child of root.children) {\n            const foundItem = findItem(child, value);\n            if (foundItem) {\n                return foundItem;\n            }\n        }\n    }\n    return undefined;\n}\nfunction findItemInList(list, value) {\n    if (isNil(list)) {\n        return undefined;\n    }\n    for (const item of list) {\n        const foundItem = findItem(item, value);\n        if (foundItem) {\n            return foundItem;\n        }\n    }\n    return undefined;\n}\nfunction findParent(root, item) {\n    if (isNil(root) || isNil(root.children)) {\n        return undefined;\n    }\n    for (const child of root.children) {\n        if (child === item) {\n            return root;\n        }\n        else {\n            const parent = findParent(child, item);\n            if (parent) {\n                return parent;\n            }\n        }\n    }\n    return undefined;\n}\nfunction removeItem(root, item) {\n    const parent = findParent(root, item);\n    if (parent) {\n        pull(parent.children, item);\n        if (parent.children.length === 0) {\n            parent.children = undefined;\n        }\n        else {\n            parent.correctChecked();\n        }\n        return true;\n    }\n    return false;\n}\nfunction concatSelection(items, checked, unchecked) {\n    let checkedItems = [...checked];\n    let uncheckedItems = [...unchecked];\n    for (const item of items) {\n        const selection = item.getSelection();\n        checkedItems = concat(checkedItems, selection.checkedItems);\n        uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n    }\n    return {\n        checked: checkedItems,\n        unchecked: uncheckedItems\n    };\n}","originalLength":7807,"removedExports":[],"renderedExports":["TreeviewHelper"],"renderedLength":1951},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-item.mjs":{"code":"class TreeviewItem {\n    internalDisabled = false;\n    internalChecked = true;\n    internalCollapsed = false;\n    internalChildren;\n    text;\n    value;\n    constructor(item, autoCorrectChecked = false) {\n        if (isNil(item)) {\n            throw new Error('Item must be defined');\n        }\n        if (isString(item.text)) {\n            this.text = item.text;\n        }\n        else {\n            throw new Error('A text of item must be string object');\n        }\n        this.value = item.value;\n        if (isBoolean(item.checked)) {\n            this.checked = item.checked;\n        }\n        if (isBoolean(item.collapsed)) {\n            this.collapsed = item.collapsed;\n        }\n        if (isBoolean(item.disabled)) {\n            this.disabled = item.disabled;\n        }\n        if (!isNil(item.children) && item.children.length > 0) {\n            this.children = item.children.map(child => {\n                if (this.disabled === true) {\n                    child.disabled = true;\n                }\n                return new TreeviewItem(child);\n            });\n        }\n        if (autoCorrectChecked) {\n            this.correctChecked();\n        }\n    }\n    get checked() {\n        return this.internalChecked;\n    }\n    set checked(value) {\n        if (!this.internalDisabled) {\n            if (this.internalChecked !== value) {\n                this.internalChecked = value;\n            }\n        }\n    }\n    get indeterminate() {\n        return this.checked === undefined;\n    }\n    setCheckedRecursive(value) {\n        if (!this.internalDisabled) {\n            this.internalChecked = value;\n            if (!isNil(this.internalChildren)) {\n                this.internalChildren.forEach(child => child.setCheckedRecursive(value));\n            }\n        }\n    }\n    get disabled() {\n        return this.internalDisabled;\n    }\n    set disabled(value) {\n        if (this.internalDisabled !== value) {\n            this.internalDisabled = value;\n            if (!isNil(this.internalChildren)) {\n                this.internalChildren.forEach(child => child.disabled = value);\n            }\n        }\n    }\n    get collapsed() {\n        return this.internalCollapsed;\n    }\n    set collapsed(value) {\n        if (this.internalCollapsed !== value) {\n            this.internalCollapsed = value;\n        }\n    }\n    setCollapsedRecursive(value) {\n        this.internalCollapsed = value;\n        if (!isNil(this.internalChildren)) {\n            this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\n        }\n    }\n    get children() {\n        return this.internalChildren;\n    }\n    set children(value) {\n        if (this.internalChildren !== value) {\n            if (!isNil(value) && value.length === 0) {\n                throw new Error('Children must be not an empty array');\n            }\n            this.internalChildren = value;\n            if (!isNil(this.internalChildren)) {\n                let checked = null;\n                this.internalChildren.forEach(child => {\n                    if (checked === null) {\n                        checked = child.checked;\n                    }\n                    else {\n                        if (child.checked !== checked) {\n                            checked = undefined;\n                            return;\n                        }\n                    }\n                });\n                this.internalChecked = checked;\n            }\n        }\n    }\n    getSelection() {\n        let checkedItems = [];\n        let uncheckedItems = [];\n        if (isNil(this.internalChildren)) {\n            if (this.internalChecked) {\n                checkedItems.push(this);\n            }\n            else {\n                uncheckedItems.push(this);\n            }\n        }\n        else {\n            const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n        return {\n            checkedItems,\n            uncheckedItems\n        };\n    }\n    correctChecked() {\n        this.internalChecked = this.getCorrectChecked();\n    }\n    getCorrectChecked() {\n        let checked = null;\n        if (!isNil(this.internalChildren)) {\n            for (const child of this.internalChildren) {\n                child.internalChecked = child.getCorrectChecked();\n                if (checked === null) {\n                    checked = child.internalChecked;\n                }\n                else if (checked !== child.internalChecked) {\n                    checked = undefined;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = this.checked;\n        }\n        return checked;\n    }\n}","originalLength":17211,"removedExports":[],"renderedExports":["TreeviewItem"],"renderedLength":4755},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-i18n.mjs":{"code":"class TreeviewI18n {\n    static ɵfac = function TreeviewI18n_Factory(t) { return new (t || TreeviewI18n)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewI18n, factory: TreeviewI18n.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewI18n, [{\n        type: Injectable\n    }], null, null); })();\nclass DefaultTreeviewI18n extends TreeviewI18n {\n    getText(selection) {\n        if (selection.uncheckedItems.length === 0) {\n            if (selection.checkedItems.length > 0) {\n                return this.getAllCheckboxText();\n            }\n            else {\n                return '';\n            }\n        }\n        switch (selection.checkedItems.length) {\n            case 0:\n                return 'Select options';\n            case 1:\n                return selection.checkedItems[0].text;\n            default:\n                return `${selection.checkedItems.length} options selected`;\n        }\n    }\n    getAllCheckboxText() {\n        return 'All';\n    }\n    getFilterPlaceholder() {\n        return 'Filter';\n    }\n    getFilterNoItemsFoundText() {\n        return 'No items found';\n    }\n    getTooltipCollapseExpandText(isCollapse) {\n        return isCollapse ? 'Expand' : 'Collapse';\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDefaultTreeviewI18n_BaseFactory; return function DefaultTreeviewI18n_Factory(t) { return (ɵDefaultTreeviewI18n_BaseFactory || (ɵDefaultTreeviewI18n_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultTreeviewI18n)))(t || DefaultTreeviewI18n); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultTreeviewI18n, factory: DefaultTreeviewI18n.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultTreeviewI18n, [{\n        type: Injectable\n    }], null, null); })();","originalLength":5207,"removedExports":[],"renderedExports":["TreeviewI18n","DefaultTreeviewI18n"],"renderedLength":1865},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-config.mjs":{"code":"class TreeviewConfig {\n    hasAllCheckBox = true;\n    hasFilter = false;\n    hasCollapseExpand = false;\n    decoupleChildFromParent = false;\n    maxHeight = 500;\n    get hasDivider() {\n        return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n    }\n    static create(fields) {\n        const config = new TreeviewConfig();\n        Object.assign(config, fields);\n        return config;\n    }\n    static ɵfac = function TreeviewConfig_Factory(t) { return new (t || TreeviewConfig)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewConfig, factory: TreeviewConfig.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewConfig, [{\n        type: Injectable\n    }], null, null); })();","originalLength":2729,"removedExports":[],"renderedExports":["TreeviewConfig"],"renderedLength":778},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/helpers/treeview-event-parser.mjs":{"code":"class TreeviewEventParser {\n    static ɵfac = function TreeviewEventParser_Factory(t) { return new (t || TreeviewEventParser)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewEventParser, factory: TreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass DefaultTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n        const checkedItems = component.selection.checkedItems;\n        if (!isNil(checkedItems)) {\n            return checkedItems.map(item => item.value);\n        }\n        return [];\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDefaultTreeviewEventParser_BaseFactory; return function DefaultTreeviewEventParser_Factory(t) { return (ɵDefaultTreeviewEventParser_BaseFactory || (ɵDefaultTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultTreeviewEventParser)))(t || DefaultTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultTreeviewEventParser, factory: DefaultTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass DownlineTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n        const items = component.items;\n        if (!isNil(items)) {\n            let result = [];\n            items.forEach(item => {\n                const links = this.getLinks(item, null);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n            return result;\n        }\n        return [];\n    }\n    getLinks(item, parent) {\n        if (!isNil(item.children)) {\n            const link = {\n                item,\n                parent\n            };\n            let result = [];\n            item.children.forEach(child => {\n                const links = this.getLinks(child, link);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n            return result;\n        }\n        if (item.checked) {\n            return [{\n                    item,\n                    parent\n                }];\n        }\n        return null;\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDownlineTreeviewEventParser_BaseFactory; return function DownlineTreeviewEventParser_Factory(t) { return (ɵDownlineTreeviewEventParser_BaseFactory || (ɵDownlineTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(DownlineTreeviewEventParser)))(t || DownlineTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DownlineTreeviewEventParser, factory: DownlineTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DownlineTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass OrderDownlineTreeviewEventParser extends TreeviewEventParser {\n    currentDownlines = [];\n    parser = new DownlineTreeviewEventParser();\n    getSelectedChange(component) {\n        const newDownlines = this.parser.getSelectedChange(component);\n        if (this.currentDownlines.length === 0) {\n            this.currentDownlines = newDownlines;\n        }\n        else {\n            const intersectDownlines = [];\n            this.currentDownlines.forEach(downline => {\n                let foundIndex = -1;\n                const length = newDownlines.length;\n                for (let i = 0; i < length; i++) {\n                    if (downline.item.value === newDownlines[i].item.value) {\n                        foundIndex = i;\n                        break;\n                    }\n                }\n                if (foundIndex !== -1) {\n                    intersectDownlines.push(newDownlines[foundIndex]);\n                    newDownlines.splice(foundIndex, 1);\n                }\n            });\n            this.currentDownlines = intersectDownlines.concat(newDownlines);\n        }\n        return this.currentDownlines;\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵOrderDownlineTreeviewEventParser_BaseFactory; return function OrderDownlineTreeviewEventParser_Factory(t) { return (ɵOrderDownlineTreeviewEventParser_BaseFactory || (ɵOrderDownlineTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(OrderDownlineTreeviewEventParser)))(t || OrderDownlineTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderDownlineTreeviewEventParser, factory: OrderDownlineTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OrderDownlineTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();","originalLength":12881,"removedExports":[],"renderedExports":["TreeviewEventParser","DefaultTreeviewEventParser","DownlineTreeviewEventParser","OrderDownlineTreeviewEventParser"],"renderedLength":4925},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/treeview-item/treeview-item.component.mjs":{"code":"function TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) { }\nfunction TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) { if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-treeview-item\", 5);\n    i0.ɵɵlistener(\"checkedChange\", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r6); const child_r4 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.onChildCheckedChange(child_r4, $event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const child_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"config\", ctx_r3.config)(\"item\", child_r4)(\"template\", ctx_r3.template);\n} }\nfunction TreeviewItemComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.item.children);\n} }\nconst _c0 = function (a0, a1, a2) { return { item: a0, onCollapseExpand: a1, onCheckedChange: a2 }; };\nfunction TreeviewItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    i0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, \"div\", 3);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.item.collapsed);\n} }\nclass TreeviewItemComponent {\n    defaultConfig;\n    config;\n    template;\n    item;\n    checkedChange = new EventEmitter();\n    constructor(defaultConfig) {\n        this.defaultConfig = defaultConfig;\n        this.config = this.defaultConfig;\n    }\n    onCollapseExpand = () => {\n        this.item.collapsed = !this.item.collapsed;\n    };\n    onCheckedChange = () => {\n        const checked = this.item.checked;\n        if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\n            this.item.children.forEach(child => child.setCheckedRecursive(checked));\n        }\n        this.checkedChange.emit(checked);\n    };\n    onChildCheckedChange(child, checked) {\n        if (!this.config.decoupleChildFromParent) {\n            let itemChecked = null;\n            for (const childItem of this.item.children) {\n                if (itemChecked === null) {\n                    itemChecked = childItem.checked;\n                }\n                else if (itemChecked !== childItem.checked) {\n                    itemChecked = undefined;\n                    break;\n                }\n            }\n            if (itemChecked === null) {\n                itemChecked = false;\n            }\n            if (this.item.checked !== itemChecked) {\n                this.item.checked = itemChecked;\n            }\n        }\n        this.checkedChange.emit(checked);\n    }\n    static ɵfac = function TreeviewItemComponent_Factory(t) { return new (t || TreeviewItemComponent)(i0.ɵɵdirectiveInject(TreeviewConfig)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeviewItemComponent, selectors: [[\"ngx-treeview-item\"]], inputs: { config: \"config\", template: \"template\", item: \"item\" }, outputs: { checkedChange: \"checkedChange\" }, decls: 1, vars: 1, consts: [[\"class\", \"treeview-item\", 4, \"ngIf\"], [1, \"treeview-item\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"]], template: function TreeviewItemComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, \"div\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.item);\n        } }, dependencies: [i5.NgForOf, i5.NgIf, i5.NgTemplateOutlet, TreeviewItemComponent], styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]{white-space:nowrap}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%]{margin-left:2rem}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewItemComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-treeview-item', template: \"<div *ngIf=\\\"item\\\" class=\\\"treeview-item\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"template\\\"\\n    [ngTemplateOutletContext]=\\\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\\\">\\n  </ng-template>\\n  <div *ngIf=\\\"!item.collapsed\\\">\\n    <ngx-treeview-item [config]=\\\"config\\\" *ngFor=\\\"let child of item.children\\\" [item]=\\\"child\\\" [template]=\\\"template\\\"\\n      (checkedChange)=\\\"onChildCheckedChange(child, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}:host .treeview-item{white-space:nowrap}:host .treeview-item .treeview-item{margin-left:2rem}\\n\"] }]\n    }], function () { return [{ type: TreeviewConfig }]; }, { config: [{\n            type: Input\n        }], template: [{\n            type: Input\n        }], item: [{\n            type: Input\n        }], checkedChange: [{\n            type: Output\n        }] }); })();","originalLength":11929,"removedExports":[],"renderedExports":["TreeviewItemComponent"],"renderedLength":5617},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/treeview/treeview.component.mjs":{"code":"function TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 15);\n    i0.ɵɵelement(1, \"path\", 16);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 17);\n    i0.ɵɵelement(1, \"path\", 18);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_0_i_1_Template(rf, ctx) { if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 12);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_i_1_Template_i_click_0_listener() { i0.ɵɵrestoreView(_r15); const onCollapseExpand_r8 = i0.ɵɵnextContext().onCollapseExpand; return i0.ɵɵresetView(onCollapseExpand_r8()); });\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template, 2, 0, \"svg\", 13);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template, 2, 0, \"svg\", 14);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngSwitch\", item_r7.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", false);\n} }\nfunction TreeviewComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1_Template, 3, 3, \"i\", 8);\n    i0.ɵɵelementStart(2, \"div\", 9)(3, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r18); const item_r7 = restoredCtx.item; return i0.ɵɵresetView(item_r7.checked = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const onCheckedChange_r9 = restoredCtx.onCheckedChange; return i0.ɵɵresetView(onCheckedChange_r9()); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_Template_label_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const item_r7 = restoredCtx.item; const onCheckedChange_r9 = restoredCtx.onCheckedChange; item_r7.checked = !item_r7.checked; return i0.ɵɵresetView(onCheckedChange_r9()); });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const item_r7 = ctx.item;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r7.children);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", item_r7.checked)(\"disabled\", item_r7.disabled)(\"indeterminate\", item_r7.indeterminate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n} }\nfunction TreeviewComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22)(2, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r28.filterText = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r29); const onFilterTextChange_r25 = i0.ɵɵnextContext().onFilterTextChange; return i0.ɵɵresetView(onFilterTextChange_r25($event)); });\n    i0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", ctx_r26.i18n.getFilterPlaceholder())(\"ngModel\", ctx_r26.filterText);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"input\", 30);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r38); const item_r22 = i0.ɵɵnextContext(3).item; return i0.ɵɵresetView(item_r22.checked = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener() { i0.ɵɵrestoreView(_r38); const onCheckedChange_r24 = i0.ɵɵnextContext(3).onCheckedChange; return i0.ɵɵresetView(onCheckedChange_r24()); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 11);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_label_click_2_listener() { i0.ɵɵrestoreView(_r38); const ctx_r42 = i0.ɵɵnextContext(3); const item_r22 = ctx_r42.item; const onCheckedChange_r24 = ctx_r42.onCheckedChange; item_r22.checked = !item_r22.checked; return i0.ɵɵresetView(onCheckedChange_r24()); });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const item_r22 = i0.ɵɵnextContext(3).item;\n    const ctx_r34 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", item_r22.checked)(\"indeterminate\", item_r22.indeterminate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r34.i18n.getAllCheckboxText(), \" \");\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 35);\n    i0.ɵɵelement(1, \"path\", 36)(2, \"path\", 37)(3, \"path\", 38);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 39);\n    i0.ɵɵelement(1, \"path\", 40)(2, \"path\", 41)(3, \"path\", 42);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template(rf, ctx) { if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 31);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template_label_click_0_listener() { i0.ɵɵrestoreView(_r48); const onCollapseExpand_r23 = i0.ɵɵnextContext(3).onCollapseExpand; return i0.ɵɵresetView(onCollapseExpand_r23()); });\n    i0.ɵɵelementStart(1, \"i\", 32);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template, 4, 0, \"svg\", 33);\n    i0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template, 4, 0, \"svg\", 34);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const item_r22 = i0.ɵɵnextContext(3).item;\n    const ctx_r35 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r35.i18n.getTooltipCollapseExpandText(item_r22.collapsed))(\"ngSwitch\", item_r22.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", false);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"div\", 22);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template, 4, 3, \"div\", 27);\n    i0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template, 4, 4, \"label\", 28);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const config_r21 = i0.ɵɵnextContext(2).config;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasCollapseExpand);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 43);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_div_1_Template, 4, 2, \"div\", 24);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_2_Template, 1, 0, \"div\", 25);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const config_r21 = i0.ɵɵnextContext().config;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox || config_r21.hasCollapseExpand);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasDivider);\n} }\nfunction TreeviewComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeviewComponent_ng_template_2_div_0_Template, 3, 2, \"div\", 19);\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_Template, 3, 2, \"div\", 20);\n} if (rf & 2) {\n    const config_r21 = ctx.config;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasFilter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.hasFilterItems);\n} }\nfunction TreeviewComponent_ng_template_5_Template(rf, ctx) { }\nfunction TreeviewComponent_div_7_ngx_treeview_item_1_Template(rf, ctx) { if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-treeview-item\", 46);\n    i0.ɵɵlistener(\"checkedChange\", function TreeviewComponent_div_7_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r55); const item_r53 = restoredCtx.$implicit; const ctx_r54 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r54.onItemCheckedChange(item_r53, $event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r53 = ctx.$implicit;\n    const ctx_r52 = i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"config\", ctx_r52.config)(\"item\", item_r53)(\"template\", ctx_r52.itemTemplate || _r0);\n} }\nfunction TreeviewComponent_div_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44);\n    i0.ɵɵtemplate(1, TreeviewComponent_div_7_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 45);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"max-height\", ctx_r5.maxHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.filterItems);\n} }\nfunction TreeviewComponent_div_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.i18n.getFilterNoItemsFoundText(), \" \");\n} }\nclass FilterTreeviewItem extends TreeviewItem {\n    refItem;\n    constructor(item) {\n        super({\n            text: item.text,\n            value: item.value,\n            disabled: item.disabled,\n            checked: item.checked,\n            collapsed: item.collapsed,\n            children: item.children\n        });\n        this.refItem = item;\n    }\n    updateRefChecked() {\n        this.children.forEach(child => {\n            if (child instanceof FilterTreeviewItem) {\n                child.updateRefChecked();\n            }\n        });\n        let refChecked = this.checked;\n        if (refChecked) {\n            for (const refChild of this.refItem.children) {\n                if (!refChild.checked) {\n                    refChecked = false;\n                    break;\n                }\n            }\n        }\n        this.refItem.checked = refChecked;\n    }\n}\nclass TreeviewComponent {\n    i18n;\n    defaultConfig;\n    eventParser;\n    headerTemplate;\n    itemTemplate;\n    items;\n    config;\n    selectedChange = new EventEmitter();\n    filterChange = new EventEmitter();\n    headerTemplateContext;\n    allItem;\n    filterText = '';\n    filterItems;\n    selection;\n    constructor(i18n, defaultConfig, eventParser) {\n        this.i18n = i18n;\n        this.defaultConfig = defaultConfig;\n        this.eventParser = eventParser;\n        this.config = this.defaultConfig;\n        this.allItem = new TreeviewItem({ text: 'All', value: undefined });\n    }\n    get hasFilterItems() {\n        return !isNil(this.filterItems) && this.filterItems.length > 0;\n    }\n    get maxHeight() {\n        return `${this.config.maxHeight}`;\n    }\n    ngOnInit() {\n        this.createHeaderTemplateContext();\n        this.generateSelection();\n    }\n    ngOnChanges(changes) {\n        const itemsSimpleChange = changes.items;\n        if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n            this.updateFilterItems();\n            this.updateCollapsedOfAll();\n            this.raiseSelectedChange();\n        }\n    }\n    onAllCollapseExpand() {\n        this.allItem.collapsed = !this.allItem.collapsed;\n        this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\n    }\n    onFilterTextChange(text) {\n        this.filterText = text;\n        this.filterChange.emit(text);\n        this.updateFilterItems();\n    }\n    onAllCheckedChange() {\n        const checked = this.allItem.checked;\n        this.filterItems.forEach(item => {\n            item.setCheckedRecursive(checked);\n            if (item instanceof FilterTreeviewItem) {\n                item.updateRefChecked();\n            }\n        });\n        this.raiseSelectedChange();\n    }\n    onItemCheckedChange(item, checked) {\n        if (item instanceof FilterTreeviewItem) {\n            item.updateRefChecked();\n        }\n        this.updateCheckedOfAll();\n        this.raiseSelectedChange();\n    }\n    raiseSelectedChange() {\n        this.generateSelection();\n        const values = this.eventParser.getSelectedChange(this);\n        setTimeout(() => {\n            this.selectedChange.emit(values);\n        });\n    }\n    createHeaderTemplateContext() {\n        this.headerTemplateContext = {\n            config: this.config,\n            item: this.allItem,\n            onCheckedChange: () => this.onAllCheckedChange(),\n            onCollapseExpand: () => this.onAllCollapseExpand(),\n            onFilterTextChange: (text) => this.onFilterTextChange(text)\n        };\n    }\n    generateSelection() {\n        let checkedItems = [];\n        let uncheckedItems = [];\n        if (!isNil(this.items)) {\n            const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n        this.selection = {\n            checkedItems,\n            uncheckedItems\n        };\n    }\n    updateFilterItems() {\n        if (this.filterText !== '') {\n            const filterItems = [];\n            const filterText = this.filterText.toLowerCase();\n            this.items.forEach(item => {\n                const newItem = this.filterItem(item, filterText);\n                if (!isNil(newItem)) {\n                    filterItems.push(newItem);\n                }\n            });\n            this.filterItems = filterItems;\n        }\n        else {\n            this.filterItems = this.items;\n        }\n        this.updateCheckedOfAll();\n    }\n    filterItem(item, filterText) {\n        const isMatch = includes(item.text.toLowerCase(), filterText);\n        if (isMatch) {\n            return item;\n        }\n        else {\n            if (!isNil(item.children)) {\n                const children = [];\n                item.children.forEach(child => {\n                    const newChild = this.filterItem(child, filterText);\n                    if (!isNil(newChild)) {\n                        children.push(newChild);\n                    }\n                });\n                if (children.length > 0) {\n                    const newItem = new FilterTreeviewItem(item);\n                    newItem.collapsed = false;\n                    newItem.children = children;\n                    return newItem;\n                }\n            }\n        }\n        return undefined;\n    }\n    updateCheckedOfAll() {\n        let itemChecked = null;\n        for (const filterItem of this.filterItems) {\n            if (itemChecked === null) {\n                itemChecked = filterItem.checked;\n            }\n            else if (itemChecked !== filterItem.checked) {\n                itemChecked = undefined;\n                break;\n            }\n        }\n        if (itemChecked === null) {\n            itemChecked = false;\n        }\n        this.allItem.checked = itemChecked;\n    }\n    updateCollapsedOfAll() {\n        let hasItemExpanded = false;\n        for (const filterItem of this.filterItems) {\n            if (!filterItem.collapsed) {\n                hasItemExpanded = true;\n                break;\n            }\n        }\n        this.allItem.collapsed = !hasItemExpanded;\n    }\n    static ɵfac = function TreeviewComponent_Factory(t) { return new (t || TreeviewComponent)(i0.ɵɵdirectiveInject(TreeviewI18n), i0.ɵɵdirectiveInject(TreeviewConfig), i0.ɵɵdirectiveInject(TreeviewEventParser)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeviewComponent, selectors: [[\"ngx-treeview\"]], inputs: { headerTemplate: \"headerTemplate\", itemTemplate: \"itemTemplate\", items: \"items\", config: \"config\" }, outputs: { selectedChange: \"selectedChange\", filterChange: \"filterChange\" }, features: [i0.ɵɵNgOnChangesFeature], decls: 9, vars: 5, consts: [[\"defaultItemTemplate\", \"\"], [\"defaultHeaderTemplate\", \"\"], [1, \"treeview-header\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"class\", \"treeview-container\", 3, \"max-height\", 4, \"ngSwitchCase\"], [\"class\", \"treeview-text\", 4, \"ngSwitchCase\"], [1, \"form-inline\", \"row-item\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\", 4, \"ngIf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"indeterminate\", \"ngModelChange\"], [1, \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-right-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-down-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-right-fill\"], [\"d\", \"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-down-fill\"], [\"d\", \"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"], [\"class\", \"row row-filter\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"row\", \"row-filter\"], [1, \"col-12\"], [\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"class\", \"row row-all\", 4, \"ngIf\"], [\"class\", \"dropdown-divider\", 4, \"ngIf\"], [1, \"row\", \"row-all\"], [\"class\", \"form-check form-check-inline\", 4, \"ngIf\"], [\"class\", \"float-right form-check-label\", 3, \"click\", 4, \"ngIf\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"indeterminate\", \"ngModelChange\"], [1, \"float-right\", \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"title\", \"ngSwitch\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-expand\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-contract\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-expand\"], [\"fill-rule\", \"evenodd\", \"d\", \"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-contract\"], [\"fill-rule\", \"evenodd\", \"d\", \"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\"], [1, \"dropdown-divider\"], [1, \"treeview-container\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"], [1, \"treeview-text\"]], template: function TreeviewComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, TreeviewComponent_ng_template_0_Template, 6, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵelementStart(4, \"div\", 2);\n            i0.ɵɵtemplate(5, TreeviewComponent_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 4);\n            i0.ɵɵtemplate(7, TreeviewComponent_div_7_Template, 2, 3, \"div\", 5);\n            i0.ɵɵtemplate(8, TreeviewComponent_div_8_Template, 2, 1, \"div\", 6);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            const _r2 = i0.ɵɵreference(3);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || _r2)(\"ngTemplateOutletContext\", ctx.headerTemplateContext);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitch\", ctx.hasFilterItems);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", false);\n        } }, dependencies: [i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgModel, i5.NgForOf, i5.NgIf, i5.NgTemplateOutlet, i5.NgSwitch, i5.NgSwitchCase, TreeviewItemComponent], styles: [\"[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-filter[_ngcontent-%COMP%]{margin-bottom:.5rem}[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-all[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]{margin-bottom:.3rem;flex-wrap:nowrap}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer;margin-right:.3rem}.treeview-container[_ngcontent-%COMP%]{overflow-y:auto;padding-right:.3rem}.treeview-text[_ngcontent-%COMP%]{padding:.3rem 0;white-space:nowrap}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-treeview', template: \"<ng-template #defaultItemTemplate let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\">\\n  <div class=\\\"form-inline row-item\\\">\\n    <i *ngIf=\\\"item.children\\\" (click)=\\\"onCollapseExpand()\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n      <svg *ngSwitchCase=\\\"true\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-right-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\\\" />\\n      </svg>\\n      <svg *ngSwitchCase=\\\"false\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-down-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\\\" />\\n      </svg>\\n    </i>\\n    <div class=\\\"form-check\\\">\\n      <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n        [disabled]=\\\"item.disabled\\\" [indeterminate]=\\\"item.indeterminate\\\" />\\n      <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n        {{item.text}}\\n      </label>\\n    </div>\\n  </div>\\n</ng-template>\\n<ng-template #defaultHeaderTemplate let-config=\\\"config\\\" let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\" let-onFilterTextChange=\\\"onFilterTextChange\\\">\\n  <div *ngIf=\\\"config.hasFilter\\\" class=\\\"row row-filter\\\">\\n    <div class=\\\"col-12\\\">\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"i18n.getFilterPlaceholder()\\\" [(ngModel)]=\\\"filterText\\\"\\n        (ngModelChange)=\\\"onFilterTextChange($event)\\\" />\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"hasFilterItems\\\">\\n    <div *ngIf=\\\"config.hasAllCheckBox || config.hasCollapseExpand\\\" class=\\\"row row-all\\\">\\n      <div class=\\\"col-12\\\">\\n        <div class=\\\"form-check form-check-inline\\\" *ngIf=\\\"config.hasAllCheckBox\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n            [indeterminate]=\\\"item.indeterminate\\\" />\\n          <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n            {{i18n.getAllCheckboxText()}}\\n          </label>\\n        </div>\\n        <label *ngIf=\\\"config.hasCollapseExpand\\\" class=\\\"float-right form-check-label\\\" (click)=\\\"onCollapseExpand()\\\">\\n          <i [title]=\\\"i18n.getTooltipCollapseExpandText(item.collapsed)\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n            <svg *ngSwitchCase=\\\"true\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-expand\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n            <svg *ngSwitchCase=\\\"false\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-contract\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n          </i>\\n        </label>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"config.hasDivider\\\" class=\\\"dropdown-divider\\\"></div>\\n  </div>\\n</ng-template>\\n<div class=\\\"treeview-header\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"headerTemplate || defaultHeaderTemplate\\\"\\n    [ngTemplateOutletContext]=\\\"headerTemplateContext\\\">\\n  </ng-template>\\n</div>\\n<div [ngSwitch]=\\\"hasFilterItems\\\">\\n  <div *ngSwitchCase=\\\"true\\\" class=\\\"treeview-container\\\" [style.max-height.px]=\\\"maxHeight\\\">\\n    <ngx-treeview-item *ngFor=\\\"let item of filterItems\\\" [config]=\\\"config\\\" [item]=\\\"item\\\"\\n      [template]=\\\"itemTemplate || defaultItemTemplate\\\" (checkedChange)=\\\"onItemCheckedChange(item, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n  <div *ngSwitchCase=\\\"false\\\" class=\\\"treeview-text\\\">\\n    {{i18n.getFilterNoItemsFoundText()}}\\n  </div>\\n</div>\\n\", styles: [\":host .treeview-header .row-filter{margin-bottom:.5rem}:host .treeview-header .row-all .bi{cursor:pointer}:host .treeview-container .row-item{margin-bottom:.3rem;flex-wrap:nowrap}:host .treeview-container .row-item .bi{cursor:pointer;margin-right:.3rem}.treeview-container{overflow-y:auto;padding-right:.3rem}.treeview-text{padding:.3rem 0;white-space:nowrap}\\n\"] }]\n    }], function () { return [{ type: TreeviewI18n }, { type: TreeviewConfig }, { type: TreeviewEventParser }]; }, { headerTemplate: [{\n            type: Input\n        }], itemTemplate: [{\n            type: Input\n        }], items: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }], selectedChange: [{\n            type: Output\n        }], filterChange: [{\n            type: Output\n        }] }); })();","originalLength":56482,"removedExports":[],"renderedExports":["TreeviewComponent"],"renderedLength":29015},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/components/dropdown-treeview/dropdown-treeview.component.mjs":{"code":"class DropdownTreeviewComponent {\n    i18n;\n    defaultConfig;\n    buttonClass = 'btn-outline-secondary';\n    headerTemplate;\n    itemTemplate;\n    items;\n    config;\n    selectedChange = new EventEmitter(true);\n    filterChange = new EventEmitter();\n    treeviewComponent;\n    buttonLabel;\n    constructor(i18n, defaultConfig) {\n        this.i18n = i18n;\n        this.defaultConfig = defaultConfig;\n        this.config = this.defaultConfig;\n    }\n    onSelectedChange(values) {\n        this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n        this.selectedChange.emit(values);\n    }\n    onFilterChange(text) {\n        this.filterChange.emit(text);\n    }\n    static ɵfac = function DropdownTreeviewComponent_Factory(t) { return new (t || DropdownTreeviewComponent)(i0.ɵɵdirectiveInject(TreeviewI18n), i0.ɵɵdirectiveInject(TreeviewConfig)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DropdownTreeviewComponent, selectors: [[\"ngx-dropdown-treeview\"]], viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) { if (rf & 1) {\n            i0.ɵɵviewQuery(TreeviewComponent, 5);\n        } if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);\n        } }, inputs: { buttonClass: \"buttonClass\", headerTemplate: \"headerTemplate\", itemTemplate: \"itemTemplate\", items: \"items\", config: \"config\" }, outputs: { selectedChange: \"selectedChange\", filterChange: \"filterChange\" }, decls: 6, vars: 6, consts: [[\"ngxDropdown\", \"\", 1, \"dropdown\"], [\"type\", \"button\", \"role\", \"button\", \"ngxDropdownToggle\", \"\", 1, \"btn\", 3, \"ngClass\"], [\"ngxDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenu\", 3, \"click\"], [1, \"dropdown-container\"], [3, \"config\", \"headerTemplate\", \"items\", \"itemTemplate\", \"selectedChange\", \"filterChange\"]], template: function DropdownTreeviewComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵlistener(\"click\", function DropdownTreeviewComponent_Template_div_click_3_listener($event) { return $event.stopPropagation(); });\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"ngx-treeview\", 4);\n            i0.ɵɵlistener(\"selectedChange\", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) { return ctx.onSelectedChange($event); })(\"filterChange\", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) { return ctx.onFilterChange($event); });\n            i0.ɵɵelementEnd()()()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngClass\", ctx.buttonClass);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.buttonLabel, \" \");\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"config\", ctx.config)(\"headerTemplate\", ctx.headerTemplate)(\"items\", ctx.items)(\"itemTemplate\", ctx.itemTemplate);\n        } }, dependencies: [i5.NgClass, TreeviewComponent, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective], styles: [\".dropdown[_ngcontent-%COMP%]{width:100%;display:inline-block}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%;margin-right:.9rem;text-align:left;overflow:hidden;padding-right:30px;text-overflow:ellipsis}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:after{position:absolute;right:.6rem;margin-top:.6rem}.dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]{padding:0 .6rem}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownTreeviewComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-dropdown-treeview', template: \"<div class=\\\"dropdown\\\" ngxDropdown>\\n  <button class=\\\"btn\\\" [ngClass]=\\\"buttonClass\\\" type=\\\"button\\\" role=\\\"button\\\" ngxDropdownToggle>\\n    {{buttonLabel}}\\n  </button>\\n  <div ngxDropdownMenu aria-labelledby=\\\"dropdownMenu\\\" (click)=\\\"$event.stopPropagation()\\\">\\n    <div class=\\\"dropdown-container\\\">\\n      <ngx-treeview [config]=\\\"config\\\" [headerTemplate]=\\\"headerTemplate\\\" [items]=\\\"items\\\" [itemTemplate]=\\\"itemTemplate\\\"\\n        (selectedChange)=\\\"onSelectedChange($event)\\\" (filterChange)=\\\"onFilterChange($event)\\\">\\n      </ngx-treeview>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".dropdown{width:100%;display:inline-block}.dropdown button{width:100%;margin-right:.9rem;text-align:left;overflow:hidden;padding-right:30px;text-overflow:ellipsis}.dropdown button:after{position:absolute;right:.6rem;margin-top:.6rem}.dropdown .dropdown-menu .dropdown-container{padding:0 .6rem}\\n\"] }]\n    }], function () { return [{ type: TreeviewI18n }, { type: TreeviewConfig }]; }, { buttonClass: [{\n            type: Input\n        }], headerTemplate: [{\n            type: Input\n        }], itemTemplate: [{\n            type: Input\n        }], items: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }], selectedChange: [{\n            type: Output\n        }], filterChange: [{\n            type: Output\n        }], treeviewComponent: [{\n            type: ViewChild,\n            args: [TreeviewComponent, { static: false }]\n        }] }); })();","originalLength":11172,"removedExports":[],"renderedExports":["DropdownTreeviewComponent"],"renderedLength":5294},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/pipes/treeview.pipe.mjs":{"code":"class TreeviewPipe {\n    transform(objects, textField) {\n        if (isNil(objects)) {\n            return undefined;\n        }\n        return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\n    }\n    static ɵfac = function TreeviewPipe_Factory(t) { return new (t || TreeviewPipe)(); };\n    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"ngxTreeview\", type: TreeviewPipe, pure: true });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'ngxTreeview'\n            }]\n    }], null, null); })();","originalLength":2367,"removedExports":[],"renderedExports":["TreeviewPipe"],"renderedLength":650},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/treeview.module.mjs":{"code":"class TreeviewModule {\n    static forRoot() {\n        return {\n            ngModule: TreeviewModule,\n            providers: [\n                TreeviewConfig,\n                { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\n                { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\n            ]\n        };\n    }\n    static ɵfac = function TreeviewModule_Factory(t) { return new (t || TreeviewModule)(); };\n    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeviewModule });\n    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [FormsModule,\n            CommonModule] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormsModule,\n                    CommonModule\n                ],\n                declarations: [\n                    TreeviewComponent,\n                    TreeviewItemComponent,\n                    TreeviewPipe,\n                    DropdownDirective,\n                    DropdownMenuDirective,\n                    DropdownToggleDirective,\n                    DropdownTreeviewComponent\n                ], exports: [\n                    TreeviewComponent,\n                    TreeviewPipe,\n                    DropdownTreeviewComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeviewModule, { declarations: [TreeviewComponent,\n        TreeviewItemComponent,\n        TreeviewPipe,\n        DropdownDirective,\n        DropdownMenuDirective,\n        DropdownToggleDirective,\n        DropdownTreeviewComponent], imports: [FormsModule,\n        CommonModule], exports: [TreeviewComponent,\n        TreeviewPipe,\n        DropdownTreeviewComponent] }); })();","originalLength":7112,"removedExports":[],"renderedExports":["TreeviewModule"],"renderedLength":1882},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/lib/models/treeview-item-template-context.mjs":{"code":"","originalLength":609,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/public-api.mjs":{"code":"/*\n * Public API Surface of ngx-treeview\n */","originalLength":2251,"removedExports":[],"renderedExports":[],"renderedLength":44},"/Users/davidebonicelli/workspace/ngx-treeview/dist/ngx-treeview/esm2022/ngx-treeview.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":504,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, HostBinding, HostListener, Injectable, Component, ViewChild, Pipe, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { isNil, pull, concat, isString, isBoolean, includes } from 'lodash';\n\nclass DropdownDirective {\n    toggleElement;\n    internalOpen = false;\n    openChange = new EventEmitter();\n    get isOpen() {\n        return this.internalOpen;\n    }\n    onKeyupEsc() {\n        this.close();\n    }\n    onDocumentClick(event) {\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\n            this.close();\n        }\n    }\n    open() {\n        if (!this.internalOpen) {\n            this.internalOpen = true;\n            this.openChange.emit(true);\n        }\n    }\n    close() {\n        if (this.internalOpen) {\n            this.internalOpen = false;\n            this.openChange.emit(false);\n        }\n    }\n    toggle() {\n        if (this.isOpen) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    }\n    isEventFromToggle(event) {\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n    static ɵfac = function DropdownDirective_Factory(t) { return new (t || DropdownDirective)(); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownDirective, selectors: [[\"\", \"ngxDropdown\", \"\"]], hostVars: 2, hostBindings: function DropdownDirective_HostBindings(rf, ctx) { if (rf & 1) {\n            i0.ɵɵlistener(\"keyup.esc\", function DropdownDirective_keyup_esc_HostBindingHandler() { return ctx.onKeyupEsc(); })(\"click\", function DropdownDirective_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, i0.ɵɵresolveDocument);\n        } if (rf & 2) {\n            i0.ɵɵclassProp(\"show\", ctx.isOpen);\n        } }, inputs: { internalOpen: [\"open\", \"internalOpen\"] }, outputs: { openChange: \"openChange\" }, exportAs: [\"ngxDropdown\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdown]',\n                exportAs: 'ngxDropdown'\n            }]\n    }], null, { internalOpen: [{\n            type: Input,\n            args: ['open']\n        }], openChange: [{\n            type: Output\n        }], isOpen: [{\n            type: HostBinding,\n            args: ['class.show']\n        }], onKeyupEsc: [{\n            type: HostListener,\n            args: ['keyup.esc']\n        }], onDocumentClick: [{\n            type: HostListener,\n            args: ['document:click', ['$event']]\n        }] }); })();\n\nclass DropdownMenuDirective {\n    dropdown;\n    constructor(dropdown) {\n        this.dropdown = dropdown;\n    }\n    static ɵfac = function DropdownMenuDirective_Factory(t) { return new (t || DropdownMenuDirective)(i0.ɵɵdirectiveInject(DropdownDirective)); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownMenuDirective, selectors: [[\"\", \"ngxDropdownMenu\", \"\"]], hostVars: 4, hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) { if (rf & 2) {\n            i0.ɵɵclassProp(\"dropdown-menu\", true)(\"show\", ctx.dropdown.isOpen);\n        } } });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownMenuDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdownMenu]',\n                host: {\n                    '[class.dropdown-menu]': 'true',\n                    '[class.show]': 'dropdown.isOpen'\n                }\n            }]\n    }], function () { return [{ type: DropdownDirective }]; }, null); })();\n\nclass DropdownToggleDirective {\n    dropdown;\n    constructor(dropdown, elementRef) {\n        this.dropdown = dropdown;\n        dropdown.toggleElement = elementRef.nativeElement;\n    }\n    static ɵfac = function DropdownToggleDirective_Factory(t) { return new (t || DropdownToggleDirective)(i0.ɵɵdirectiveInject(DropdownDirective), i0.ɵɵdirectiveInject(i0.ElementRef)); };\n    static ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: DropdownToggleDirective, selectors: [[\"\", \"ngxDropdownToggle\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\", 1, \"dropdown-toggle\"], hostVars: 1, hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() { return ctx.dropdown.toggle(); });\n        } if (rf & 2) {\n            i0.ɵɵattribute(\"aria-expanded\", ctx.dropdown.isOpen);\n        } } });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownToggleDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxDropdownToggle]',\n                host: {\n                    class: 'dropdown-toggle',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'dropdown.isOpen',\n                    '(click)': 'dropdown.toggle()'\n                }\n            }]\n    }], function () { return [{ type: DropdownDirective }, { type: i0.ElementRef }]; }, null); })();\n\nconst TreeviewHelper = {\n    findItem,\n    findItemInList,\n    findParent,\n    removeItem,\n    concatSelection\n};\nfunction findItem(root, value) {\n    if (isNil(root)) {\n        return undefined;\n    }\n    if (root.value === value) {\n        return root;\n    }\n    if (root.children) {\n        for (const child of root.children) {\n            const foundItem = findItem(child, value);\n            if (foundItem) {\n                return foundItem;\n            }\n        }\n    }\n    return undefined;\n}\nfunction findItemInList(list, value) {\n    if (isNil(list)) {\n        return undefined;\n    }\n    for (const item of list) {\n        const foundItem = findItem(item, value);\n        if (foundItem) {\n            return foundItem;\n        }\n    }\n    return undefined;\n}\nfunction findParent(root, item) {\n    if (isNil(root) || isNil(root.children)) {\n        return undefined;\n    }\n    for (const child of root.children) {\n        if (child === item) {\n            return root;\n        }\n        else {\n            const parent = findParent(child, item);\n            if (parent) {\n                return parent;\n            }\n        }\n    }\n    return undefined;\n}\nfunction removeItem(root, item) {\n    const parent = findParent(root, item);\n    if (parent) {\n        pull(parent.children, item);\n        if (parent.children.length === 0) {\n            parent.children = undefined;\n        }\n        else {\n            parent.correctChecked();\n        }\n        return true;\n    }\n    return false;\n}\nfunction concatSelection(items, checked, unchecked) {\n    let checkedItems = [...checked];\n    let uncheckedItems = [...unchecked];\n    for (const item of items) {\n        const selection = item.getSelection();\n        checkedItems = concat(checkedItems, selection.checkedItems);\n        uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n    }\n    return {\n        checked: checkedItems,\n        unchecked: uncheckedItems\n    };\n}\n\nclass TreeviewItem {\n    internalDisabled = false;\n    internalChecked = true;\n    internalCollapsed = false;\n    internalChildren;\n    text;\n    value;\n    constructor(item, autoCorrectChecked = false) {\n        if (isNil(item)) {\n            throw new Error('Item must be defined');\n        }\n        if (isString(item.text)) {\n            this.text = item.text;\n        }\n        else {\n            throw new Error('A text of item must be string object');\n        }\n        this.value = item.value;\n        if (isBoolean(item.checked)) {\n            this.checked = item.checked;\n        }\n        if (isBoolean(item.collapsed)) {\n            this.collapsed = item.collapsed;\n        }\n        if (isBoolean(item.disabled)) {\n            this.disabled = item.disabled;\n        }\n        if (!isNil(item.children) && item.children.length > 0) {\n            this.children = item.children.map(child => {\n                if (this.disabled === true) {\n                    child.disabled = true;\n                }\n                return new TreeviewItem(child);\n            });\n        }\n        if (autoCorrectChecked) {\n            this.correctChecked();\n        }\n    }\n    get checked() {\n        return this.internalChecked;\n    }\n    set checked(value) {\n        if (!this.internalDisabled) {\n            if (this.internalChecked !== value) {\n                this.internalChecked = value;\n            }\n        }\n    }\n    get indeterminate() {\n        return this.checked === undefined;\n    }\n    setCheckedRecursive(value) {\n        if (!this.internalDisabled) {\n            this.internalChecked = value;\n            if (!isNil(this.internalChildren)) {\n                this.internalChildren.forEach(child => child.setCheckedRecursive(value));\n            }\n        }\n    }\n    get disabled() {\n        return this.internalDisabled;\n    }\n    set disabled(value) {\n        if (this.internalDisabled !== value) {\n            this.internalDisabled = value;\n            if (!isNil(this.internalChildren)) {\n                this.internalChildren.forEach(child => child.disabled = value);\n            }\n        }\n    }\n    get collapsed() {\n        return this.internalCollapsed;\n    }\n    set collapsed(value) {\n        if (this.internalCollapsed !== value) {\n            this.internalCollapsed = value;\n        }\n    }\n    setCollapsedRecursive(value) {\n        this.internalCollapsed = value;\n        if (!isNil(this.internalChildren)) {\n            this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\n        }\n    }\n    get children() {\n        return this.internalChildren;\n    }\n    set children(value) {\n        if (this.internalChildren !== value) {\n            if (!isNil(value) && value.length === 0) {\n                throw new Error('Children must be not an empty array');\n            }\n            this.internalChildren = value;\n            if (!isNil(this.internalChildren)) {\n                let checked = null;\n                this.internalChildren.forEach(child => {\n                    if (checked === null) {\n                        checked = child.checked;\n                    }\n                    else {\n                        if (child.checked !== checked) {\n                            checked = undefined;\n                            return;\n                        }\n                    }\n                });\n                this.internalChecked = checked;\n            }\n        }\n    }\n    getSelection() {\n        let checkedItems = [];\n        let uncheckedItems = [];\n        if (isNil(this.internalChildren)) {\n            if (this.internalChecked) {\n                checkedItems.push(this);\n            }\n            else {\n                uncheckedItems.push(this);\n            }\n        }\n        else {\n            const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n        return {\n            checkedItems,\n            uncheckedItems\n        };\n    }\n    correctChecked() {\n        this.internalChecked = this.getCorrectChecked();\n    }\n    getCorrectChecked() {\n        let checked = null;\n        if (!isNil(this.internalChildren)) {\n            for (const child of this.internalChildren) {\n                child.internalChecked = child.getCorrectChecked();\n                if (checked === null) {\n                    checked = child.internalChecked;\n                }\n                else if (checked !== child.internalChecked) {\n                    checked = undefined;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = this.checked;\n        }\n        return checked;\n    }\n}\n\nclass TreeviewI18n {\n    static ɵfac = function TreeviewI18n_Factory(t) { return new (t || TreeviewI18n)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewI18n, factory: TreeviewI18n.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewI18n, [{\n        type: Injectable\n    }], null, null); })();\nclass DefaultTreeviewI18n extends TreeviewI18n {\n    getText(selection) {\n        if (selection.uncheckedItems.length === 0) {\n            if (selection.checkedItems.length > 0) {\n                return this.getAllCheckboxText();\n            }\n            else {\n                return '';\n            }\n        }\n        switch (selection.checkedItems.length) {\n            case 0:\n                return 'Select options';\n            case 1:\n                return selection.checkedItems[0].text;\n            default:\n                return `${selection.checkedItems.length} options selected`;\n        }\n    }\n    getAllCheckboxText() {\n        return 'All';\n    }\n    getFilterPlaceholder() {\n        return 'Filter';\n    }\n    getFilterNoItemsFoundText() {\n        return 'No items found';\n    }\n    getTooltipCollapseExpandText(isCollapse) {\n        return isCollapse ? 'Expand' : 'Collapse';\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDefaultTreeviewI18n_BaseFactory; return function DefaultTreeviewI18n_Factory(t) { return (ɵDefaultTreeviewI18n_BaseFactory || (ɵDefaultTreeviewI18n_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultTreeviewI18n)))(t || DefaultTreeviewI18n); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultTreeviewI18n, factory: DefaultTreeviewI18n.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultTreeviewI18n, [{\n        type: Injectable\n    }], null, null); })();\n\nclass TreeviewConfig {\n    hasAllCheckBox = true;\n    hasFilter = false;\n    hasCollapseExpand = false;\n    decoupleChildFromParent = false;\n    maxHeight = 500;\n    get hasDivider() {\n        return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n    }\n    static create(fields) {\n        const config = new TreeviewConfig();\n        Object.assign(config, fields);\n        return config;\n    }\n    static ɵfac = function TreeviewConfig_Factory(t) { return new (t || TreeviewConfig)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewConfig, factory: TreeviewConfig.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewConfig, [{\n        type: Injectable\n    }], null, null); })();\n\nclass TreeviewEventParser {\n    static ɵfac = function TreeviewEventParser_Factory(t) { return new (t || TreeviewEventParser)(); };\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeviewEventParser, factory: TreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass DefaultTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n        const checkedItems = component.selection.checkedItems;\n        if (!isNil(checkedItems)) {\n            return checkedItems.map(item => item.value);\n        }\n        return [];\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDefaultTreeviewEventParser_BaseFactory; return function DefaultTreeviewEventParser_Factory(t) { return (ɵDefaultTreeviewEventParser_BaseFactory || (ɵDefaultTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultTreeviewEventParser)))(t || DefaultTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultTreeviewEventParser, factory: DefaultTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass DownlineTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n        const items = component.items;\n        if (!isNil(items)) {\n            let result = [];\n            items.forEach(item => {\n                const links = this.getLinks(item, null);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n            return result;\n        }\n        return [];\n    }\n    getLinks(item, parent) {\n        if (!isNil(item.children)) {\n            const link = {\n                item,\n                parent\n            };\n            let result = [];\n            item.children.forEach(child => {\n                const links = this.getLinks(child, link);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n            return result;\n        }\n        if (item.checked) {\n            return [{\n                    item,\n                    parent\n                }];\n        }\n        return null;\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵDownlineTreeviewEventParser_BaseFactory; return function DownlineTreeviewEventParser_Factory(t) { return (ɵDownlineTreeviewEventParser_BaseFactory || (ɵDownlineTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(DownlineTreeviewEventParser)))(t || DownlineTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DownlineTreeviewEventParser, factory: DownlineTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DownlineTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\nclass OrderDownlineTreeviewEventParser extends TreeviewEventParser {\n    currentDownlines = [];\n    parser = new DownlineTreeviewEventParser();\n    getSelectedChange(component) {\n        const newDownlines = this.parser.getSelectedChange(component);\n        if (this.currentDownlines.length === 0) {\n            this.currentDownlines = newDownlines;\n        }\n        else {\n            const intersectDownlines = [];\n            this.currentDownlines.forEach(downline => {\n                let foundIndex = -1;\n                const length = newDownlines.length;\n                for (let i = 0; i < length; i++) {\n                    if (downline.item.value === newDownlines[i].item.value) {\n                        foundIndex = i;\n                        break;\n                    }\n                }\n                if (foundIndex !== -1) {\n                    intersectDownlines.push(newDownlines[foundIndex]);\n                    newDownlines.splice(foundIndex, 1);\n                }\n            });\n            this.currentDownlines = intersectDownlines.concat(newDownlines);\n        }\n        return this.currentDownlines;\n    }\n    static ɵfac = /*@__PURE__*/ function () { let ɵOrderDownlineTreeviewEventParser_BaseFactory; return function OrderDownlineTreeviewEventParser_Factory(t) { return (ɵOrderDownlineTreeviewEventParser_BaseFactory || (ɵOrderDownlineTreeviewEventParser_BaseFactory = i0.ɵɵgetInheritedFactory(OrderDownlineTreeviewEventParser)))(t || OrderDownlineTreeviewEventParser); }; }();\n    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderDownlineTreeviewEventParser, factory: OrderDownlineTreeviewEventParser.ɵfac });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OrderDownlineTreeviewEventParser, [{\n        type: Injectable\n    }], null, null); })();\n\nfunction TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) { }\nfunction TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) { if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-treeview-item\", 5);\n    i0.ɵɵlistener(\"checkedChange\", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r6); const child_r4 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.onChildCheckedChange(child_r4, $event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const child_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"config\", ctx_r3.config)(\"item\", child_r4)(\"template\", ctx_r3.template);\n} }\nfunction TreeviewItemComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.item.children);\n} }\nconst _c0 = function (a0, a1, a2) { return { item: a0, onCollapseExpand: a1, onCheckedChange: a2 }; };\nfunction TreeviewItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    i0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, \"div\", 3);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.item.collapsed);\n} }\nclass TreeviewItemComponent {\n    defaultConfig;\n    config;\n    template;\n    item;\n    checkedChange = new EventEmitter();\n    constructor(defaultConfig) {\n        this.defaultConfig = defaultConfig;\n        this.config = this.defaultConfig;\n    }\n    onCollapseExpand = () => {\n        this.item.collapsed = !this.item.collapsed;\n    };\n    onCheckedChange = () => {\n        const checked = this.item.checked;\n        if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\n            this.item.children.forEach(child => child.setCheckedRecursive(checked));\n        }\n        this.checkedChange.emit(checked);\n    };\n    onChildCheckedChange(child, checked) {\n        if (!this.config.decoupleChildFromParent) {\n            let itemChecked = null;\n            for (const childItem of this.item.children) {\n                if (itemChecked === null) {\n                    itemChecked = childItem.checked;\n                }\n                else if (itemChecked !== childItem.checked) {\n                    itemChecked = undefined;\n                    break;\n                }\n            }\n            if (itemChecked === null) {\n                itemChecked = false;\n            }\n            if (this.item.checked !== itemChecked) {\n                this.item.checked = itemChecked;\n            }\n        }\n        this.checkedChange.emit(checked);\n    }\n    static ɵfac = function TreeviewItemComponent_Factory(t) { return new (t || TreeviewItemComponent)(i0.ɵɵdirectiveInject(TreeviewConfig)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeviewItemComponent, selectors: [[\"ngx-treeview-item\"]], inputs: { config: \"config\", template: \"template\", item: \"item\" }, outputs: { checkedChange: \"checkedChange\" }, decls: 1, vars: 1, consts: [[\"class\", \"treeview-item\", 4, \"ngIf\"], [1, \"treeview-item\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"]], template: function TreeviewItemComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, \"div\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.item);\n        } }, dependencies: [i5.NgForOf, i5.NgIf, i5.NgTemplateOutlet, TreeviewItemComponent], styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]{white-space:nowrap}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%]{margin-left:2rem}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewItemComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-treeview-item', template: \"<div *ngIf=\\\"item\\\" class=\\\"treeview-item\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"template\\\"\\n    [ngTemplateOutletContext]=\\\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\\\">\\n  </ng-template>\\n  <div *ngIf=\\\"!item.collapsed\\\">\\n    <ngx-treeview-item [config]=\\\"config\\\" *ngFor=\\\"let child of item.children\\\" [item]=\\\"child\\\" [template]=\\\"template\\\"\\n      (checkedChange)=\\\"onChildCheckedChange(child, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}:host .treeview-item{white-space:nowrap}:host .treeview-item .treeview-item{margin-left:2rem}\\n\"] }]\n    }], function () { return [{ type: TreeviewConfig }]; }, { config: [{\n            type: Input\n        }], template: [{\n            type: Input\n        }], item: [{\n            type: Input\n        }], checkedChange: [{\n            type: Output\n        }] }); })();\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 15);\n    i0.ɵɵelement(1, \"path\", 16);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 17);\n    i0.ɵɵelement(1, \"path\", 18);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_0_i_1_Template(rf, ctx) { if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 12);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_i_1_Template_i_click_0_listener() { i0.ɵɵrestoreView(_r15); const onCollapseExpand_r8 = i0.ɵɵnextContext().onCollapseExpand; return i0.ɵɵresetView(onCollapseExpand_r8()); });\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template, 2, 0, \"svg\", 13);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template, 2, 0, \"svg\", 14);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngSwitch\", item_r7.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", false);\n} }\nfunction TreeviewComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1_Template, 3, 3, \"i\", 8);\n    i0.ɵɵelementStart(2, \"div\", 9)(3, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r18); const item_r7 = restoredCtx.item; return i0.ɵɵresetView(item_r7.checked = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const onCheckedChange_r9 = restoredCtx.onCheckedChange; return i0.ɵɵresetView(onCheckedChange_r9()); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_Template_label_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const item_r7 = restoredCtx.item; const onCheckedChange_r9 = restoredCtx.onCheckedChange; item_r7.checked = !item_r7.checked; return i0.ɵɵresetView(onCheckedChange_r9()); });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const item_r7 = ctx.item;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r7.children);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", item_r7.checked)(\"disabled\", item_r7.disabled)(\"indeterminate\", item_r7.indeterminate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n} }\nfunction TreeviewComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22)(2, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r28.filterText = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r29); const onFilterTextChange_r25 = i0.ɵɵnextContext().onFilterTextChange; return i0.ɵɵresetView(onFilterTextChange_r25($event)); });\n    i0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", ctx_r26.i18n.getFilterPlaceholder())(\"ngModel\", ctx_r26.filterText);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"input\", 30);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r38); const item_r22 = i0.ɵɵnextContext(3).item; return i0.ɵɵresetView(item_r22.checked = $event); })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener() { i0.ɵɵrestoreView(_r38); const onCheckedChange_r24 = i0.ɵɵnextContext(3).onCheckedChange; return i0.ɵɵresetView(onCheckedChange_r24()); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 11);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_label_click_2_listener() { i0.ɵɵrestoreView(_r38); const ctx_r42 = i0.ɵɵnextContext(3); const item_r22 = ctx_r42.item; const onCheckedChange_r24 = ctx_r42.onCheckedChange; item_r22.checked = !item_r22.checked; return i0.ɵɵresetView(onCheckedChange_r24()); });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const item_r22 = i0.ɵɵnextContext(3).item;\n    const ctx_r34 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", item_r22.checked)(\"indeterminate\", item_r22.indeterminate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r34.i18n.getAllCheckboxText(), \" \");\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 35);\n    i0.ɵɵelement(1, \"path\", 36)(2, \"path\", 37)(3, \"path\", 38);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 39);\n    i0.ɵɵelement(1, \"path\", 40)(2, \"path\", 41)(3, \"path\", 42);\n    i0.ɵɵelementEnd();\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template(rf, ctx) { if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 31);\n    i0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template_label_click_0_listener() { i0.ɵɵrestoreView(_r48); const onCollapseExpand_r23 = i0.ɵɵnextContext(3).onCollapseExpand; return i0.ɵɵresetView(onCollapseExpand_r23()); });\n    i0.ɵɵelementStart(1, \"i\", 32);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template, 4, 0, \"svg\", 33);\n    i0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template, 4, 0, \"svg\", 34);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const item_r22 = i0.ɵɵnextContext(3).item;\n    const ctx_r35 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r35.i18n.getTooltipCollapseExpandText(item_r22.collapsed))(\"ngSwitch\", item_r22.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", false);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"div\", 22);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template, 4, 3, \"div\", 27);\n    i0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template, 4, 4, \"label\", 28);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const config_r21 = i0.ɵɵnextContext(2).config;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasCollapseExpand);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 43);\n} }\nfunction TreeviewComponent_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_div_1_Template, 4, 2, \"div\", 24);\n    i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_2_Template, 1, 0, \"div\", 25);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const config_r21 = i0.ɵɵnextContext().config;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox || config_r21.hasCollapseExpand);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasDivider);\n} }\nfunction TreeviewComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeviewComponent_ng_template_2_div_0_Template, 3, 2, \"div\", 19);\n    i0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_Template, 3, 2, \"div\", 20);\n} if (rf & 2) {\n    const config_r21 = ctx.config;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", config_r21.hasFilter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.hasFilterItems);\n} }\nfunction TreeviewComponent_ng_template_5_Template(rf, ctx) { }\nfunction TreeviewComponent_div_7_ngx_treeview_item_1_Template(rf, ctx) { if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-treeview-item\", 46);\n    i0.ɵɵlistener(\"checkedChange\", function TreeviewComponent_div_7_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r55); const item_r53 = restoredCtx.$implicit; const ctx_r54 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r54.onItemCheckedChange(item_r53, $event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r53 = ctx.$implicit;\n    const ctx_r52 = i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"config\", ctx_r52.config)(\"item\", item_r53)(\"template\", ctx_r52.itemTemplate || _r0);\n} }\nfunction TreeviewComponent_div_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44);\n    i0.ɵɵtemplate(1, TreeviewComponent_div_7_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 45);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"max-height\", ctx_r5.maxHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.filterItems);\n} }\nfunction TreeviewComponent_div_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.i18n.getFilterNoItemsFoundText(), \" \");\n} }\nclass FilterTreeviewItem extends TreeviewItem {\n    refItem;\n    constructor(item) {\n        super({\n            text: item.text,\n            value: item.value,\n            disabled: item.disabled,\n            checked: item.checked,\n            collapsed: item.collapsed,\n            children: item.children\n        });\n        this.refItem = item;\n    }\n    updateRefChecked() {\n        this.children.forEach(child => {\n            if (child instanceof FilterTreeviewItem) {\n                child.updateRefChecked();\n            }\n        });\n        let refChecked = this.checked;\n        if (refChecked) {\n            for (const refChild of this.refItem.children) {\n                if (!refChild.checked) {\n                    refChecked = false;\n                    break;\n                }\n            }\n        }\n        this.refItem.checked = refChecked;\n    }\n}\nclass TreeviewComponent {\n    i18n;\n    defaultConfig;\n    eventParser;\n    headerTemplate;\n    itemTemplate;\n    items;\n    config;\n    selectedChange = new EventEmitter();\n    filterChange = new EventEmitter();\n    headerTemplateContext;\n    allItem;\n    filterText = '';\n    filterItems;\n    selection;\n    constructor(i18n, defaultConfig, eventParser) {\n        this.i18n = i18n;\n        this.defaultConfig = defaultConfig;\n        this.eventParser = eventParser;\n        this.config = this.defaultConfig;\n        this.allItem = new TreeviewItem({ text: 'All', value: undefined });\n    }\n    get hasFilterItems() {\n        return !isNil(this.filterItems) && this.filterItems.length > 0;\n    }\n    get maxHeight() {\n        return `${this.config.maxHeight}`;\n    }\n    ngOnInit() {\n        this.createHeaderTemplateContext();\n        this.generateSelection();\n    }\n    ngOnChanges(changes) {\n        const itemsSimpleChange = changes.items;\n        if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n            this.updateFilterItems();\n            this.updateCollapsedOfAll();\n            this.raiseSelectedChange();\n        }\n    }\n    onAllCollapseExpand() {\n        this.allItem.collapsed = !this.allItem.collapsed;\n        this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\n    }\n    onFilterTextChange(text) {\n        this.filterText = text;\n        this.filterChange.emit(text);\n        this.updateFilterItems();\n    }\n    onAllCheckedChange() {\n        const checked = this.allItem.checked;\n        this.filterItems.forEach(item => {\n            item.setCheckedRecursive(checked);\n            if (item instanceof FilterTreeviewItem) {\n                item.updateRefChecked();\n            }\n        });\n        this.raiseSelectedChange();\n    }\n    onItemCheckedChange(item, checked) {\n        if (item instanceof FilterTreeviewItem) {\n            item.updateRefChecked();\n        }\n        this.updateCheckedOfAll();\n        this.raiseSelectedChange();\n    }\n    raiseSelectedChange() {\n        this.generateSelection();\n        const values = this.eventParser.getSelectedChange(this);\n        setTimeout(() => {\n            this.selectedChange.emit(values);\n        });\n    }\n    createHeaderTemplateContext() {\n        this.headerTemplateContext = {\n            config: this.config,\n            item: this.allItem,\n            onCheckedChange: () => this.onAllCheckedChange(),\n            onCollapseExpand: () => this.onAllCollapseExpand(),\n            onFilterTextChange: (text) => this.onFilterTextChange(text)\n        };\n    }\n    generateSelection() {\n        let checkedItems = [];\n        let uncheckedItems = [];\n        if (!isNil(this.items)) {\n            const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n        this.selection = {\n            checkedItems,\n            uncheckedItems\n        };\n    }\n    updateFilterItems() {\n        if (this.filterText !== '') {\n            const filterItems = [];\n            const filterText = this.filterText.toLowerCase();\n            this.items.forEach(item => {\n                const newItem = this.filterItem(item, filterText);\n                if (!isNil(newItem)) {\n                    filterItems.push(newItem);\n                }\n            });\n            this.filterItems = filterItems;\n        }\n        else {\n            this.filterItems = this.items;\n        }\n        this.updateCheckedOfAll();\n    }\n    filterItem(item, filterText) {\n        const isMatch = includes(item.text.toLowerCase(), filterText);\n        if (isMatch) {\n            return item;\n        }\n        else {\n            if (!isNil(item.children)) {\n                const children = [];\n                item.children.forEach(child => {\n                    const newChild = this.filterItem(child, filterText);\n                    if (!isNil(newChild)) {\n                        children.push(newChild);\n                    }\n                });\n                if (children.length > 0) {\n                    const newItem = new FilterTreeviewItem(item);\n                    newItem.collapsed = false;\n                    newItem.children = children;\n                    return newItem;\n                }\n            }\n        }\n        return undefined;\n    }\n    updateCheckedOfAll() {\n        let itemChecked = null;\n        for (const filterItem of this.filterItems) {\n            if (itemChecked === null) {\n                itemChecked = filterItem.checked;\n            }\n            else if (itemChecked !== filterItem.checked) {\n                itemChecked = undefined;\n                break;\n            }\n        }\n        if (itemChecked === null) {\n            itemChecked = false;\n        }\n        this.allItem.checked = itemChecked;\n    }\n    updateCollapsedOfAll() {\n        let hasItemExpanded = false;\n        for (const filterItem of this.filterItems) {\n            if (!filterItem.collapsed) {\n                hasItemExpanded = true;\n                break;\n            }\n        }\n        this.allItem.collapsed = !hasItemExpanded;\n    }\n    static ɵfac = function TreeviewComponent_Factory(t) { return new (t || TreeviewComponent)(i0.ɵɵdirectiveInject(TreeviewI18n), i0.ɵɵdirectiveInject(TreeviewConfig), i0.ɵɵdirectiveInject(TreeviewEventParser)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeviewComponent, selectors: [[\"ngx-treeview\"]], inputs: { headerTemplate: \"headerTemplate\", itemTemplate: \"itemTemplate\", items: \"items\", config: \"config\" }, outputs: { selectedChange: \"selectedChange\", filterChange: \"filterChange\" }, features: [i0.ɵɵNgOnChangesFeature], decls: 9, vars: 5, consts: [[\"defaultItemTemplate\", \"\"], [\"defaultHeaderTemplate\", \"\"], [1, \"treeview-header\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"class\", \"treeview-container\", 3, \"max-height\", 4, \"ngSwitchCase\"], [\"class\", \"treeview-text\", 4, \"ngSwitchCase\"], [1, \"form-inline\", \"row-item\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\", 4, \"ngIf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"indeterminate\", \"ngModelChange\"], [1, \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-right-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-down-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-right-fill\"], [\"d\", \"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-down-fill\"], [\"d\", \"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"], [\"class\", \"row row-filter\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"row\", \"row-filter\"], [1, \"col-12\"], [\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"class\", \"row row-all\", 4, \"ngIf\"], [\"class\", \"dropdown-divider\", 4, \"ngIf\"], [1, \"row\", \"row-all\"], [\"class\", \"form-check form-check-inline\", 4, \"ngIf\"], [\"class\", \"float-right form-check-label\", 3, \"click\", 4, \"ngIf\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"indeterminate\", \"ngModelChange\"], [1, \"float-right\", \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"title\", \"ngSwitch\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-expand\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-contract\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-expand\"], [\"fill-rule\", \"evenodd\", \"d\", \"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-contract\"], [\"fill-rule\", \"evenodd\", \"d\", \"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\"], [1, \"dropdown-divider\"], [1, \"treeview-container\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"], [1, \"treeview-text\"]], template: function TreeviewComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, TreeviewComponent_ng_template_0_Template, 6, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵelementStart(4, \"div\", 2);\n            i0.ɵɵtemplate(5, TreeviewComponent_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 4);\n            i0.ɵɵtemplate(7, TreeviewComponent_div_7_Template, 2, 3, \"div\", 5);\n            i0.ɵɵtemplate(8, TreeviewComponent_div_8_Template, 2, 1, \"div\", 6);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            const _r2 = i0.ɵɵreference(3);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || _r2)(\"ngTemplateOutletContext\", ctx.headerTemplateContext);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitch\", ctx.hasFilterItems);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngSwitchCase\", false);\n        } }, dependencies: [i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgModel, i5.NgForOf, i5.NgIf, i5.NgTemplateOutlet, i5.NgSwitch, i5.NgSwitchCase, TreeviewItemComponent], styles: [\"[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-filter[_ngcontent-%COMP%]{margin-bottom:.5rem}[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-all[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]{margin-bottom:.3rem;flex-wrap:nowrap}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer;margin-right:.3rem}.treeview-container[_ngcontent-%COMP%]{overflow-y:auto;padding-right:.3rem}.treeview-text[_ngcontent-%COMP%]{padding:.3rem 0;white-space:nowrap}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-treeview', template: \"<ng-template #defaultItemTemplate let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\">\\n  <div class=\\\"form-inline row-item\\\">\\n    <i *ngIf=\\\"item.children\\\" (click)=\\\"onCollapseExpand()\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n      <svg *ngSwitchCase=\\\"true\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-right-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\\\" />\\n      </svg>\\n      <svg *ngSwitchCase=\\\"false\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-down-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\\\" />\\n      </svg>\\n    </i>\\n    <div class=\\\"form-check\\\">\\n      <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n        [disabled]=\\\"item.disabled\\\" [indeterminate]=\\\"item.indeterminate\\\" />\\n      <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n        {{item.text}}\\n      </label>\\n    </div>\\n  </div>\\n</ng-template>\\n<ng-template #defaultHeaderTemplate let-config=\\\"config\\\" let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\" let-onFilterTextChange=\\\"onFilterTextChange\\\">\\n  <div *ngIf=\\\"config.hasFilter\\\" class=\\\"row row-filter\\\">\\n    <div class=\\\"col-12\\\">\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"i18n.getFilterPlaceholder()\\\" [(ngModel)]=\\\"filterText\\\"\\n        (ngModelChange)=\\\"onFilterTextChange($event)\\\" />\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"hasFilterItems\\\">\\n    <div *ngIf=\\\"config.hasAllCheckBox || config.hasCollapseExpand\\\" class=\\\"row row-all\\\">\\n      <div class=\\\"col-12\\\">\\n        <div class=\\\"form-check form-check-inline\\\" *ngIf=\\\"config.hasAllCheckBox\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n            [indeterminate]=\\\"item.indeterminate\\\" />\\n          <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n            {{i18n.getAllCheckboxText()}}\\n          </label>\\n        </div>\\n        <label *ngIf=\\\"config.hasCollapseExpand\\\" class=\\\"float-right form-check-label\\\" (click)=\\\"onCollapseExpand()\\\">\\n          <i [title]=\\\"i18n.getTooltipCollapseExpandText(item.collapsed)\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n            <svg *ngSwitchCase=\\\"true\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-expand\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n            <svg *ngSwitchCase=\\\"false\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-contract\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n          </i>\\n        </label>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"config.hasDivider\\\" class=\\\"dropdown-divider\\\"></div>\\n  </div>\\n</ng-template>\\n<div class=\\\"treeview-header\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"headerTemplate || defaultHeaderTemplate\\\"\\n    [ngTemplateOutletContext]=\\\"headerTemplateContext\\\">\\n  </ng-template>\\n</div>\\n<div [ngSwitch]=\\\"hasFilterItems\\\">\\n  <div *ngSwitchCase=\\\"true\\\" class=\\\"treeview-container\\\" [style.max-height.px]=\\\"maxHeight\\\">\\n    <ngx-treeview-item *ngFor=\\\"let item of filterItems\\\" [config]=\\\"config\\\" [item]=\\\"item\\\"\\n      [template]=\\\"itemTemplate || defaultItemTemplate\\\" (checkedChange)=\\\"onItemCheckedChange(item, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n  <div *ngSwitchCase=\\\"false\\\" class=\\\"treeview-text\\\">\\n    {{i18n.getFilterNoItemsFoundText()}}\\n  </div>\\n</div>\\n\", styles: [\":host .treeview-header .row-filter{margin-bottom:.5rem}:host .treeview-header .row-all .bi{cursor:pointer}:host .treeview-container .row-item{margin-bottom:.3rem;flex-wrap:nowrap}:host .treeview-container .row-item .bi{cursor:pointer;margin-right:.3rem}.treeview-container{overflow-y:auto;padding-right:.3rem}.treeview-text{padding:.3rem 0;white-space:nowrap}\\n\"] }]\n    }], function () { return [{ type: TreeviewI18n }, { type: TreeviewConfig }, { type: TreeviewEventParser }]; }, { headerTemplate: [{\n            type: Input\n        }], itemTemplate: [{\n            type: Input\n        }], items: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }], selectedChange: [{\n            type: Output\n        }], filterChange: [{\n            type: Output\n        }] }); })();\n\nclass DropdownTreeviewComponent {\n    i18n;\n    defaultConfig;\n    buttonClass = 'btn-outline-secondary';\n    headerTemplate;\n    itemTemplate;\n    items;\n    config;\n    selectedChange = new EventEmitter(true);\n    filterChange = new EventEmitter();\n    treeviewComponent;\n    buttonLabel;\n    constructor(i18n, defaultConfig) {\n        this.i18n = i18n;\n        this.defaultConfig = defaultConfig;\n        this.config = this.defaultConfig;\n    }\n    onSelectedChange(values) {\n        this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n        this.selectedChange.emit(values);\n    }\n    onFilterChange(text) {\n        this.filterChange.emit(text);\n    }\n    static ɵfac = function DropdownTreeviewComponent_Factory(t) { return new (t || DropdownTreeviewComponent)(i0.ɵɵdirectiveInject(TreeviewI18n), i0.ɵɵdirectiveInject(TreeviewConfig)); };\n    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DropdownTreeviewComponent, selectors: [[\"ngx-dropdown-treeview\"]], viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) { if (rf & 1) {\n            i0.ɵɵviewQuery(TreeviewComponent, 5);\n        } if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);\n        } }, inputs: { buttonClass: \"buttonClass\", headerTemplate: \"headerTemplate\", itemTemplate: \"itemTemplate\", items: \"items\", config: \"config\" }, outputs: { selectedChange: \"selectedChange\", filterChange: \"filterChange\" }, decls: 6, vars: 6, consts: [[\"ngxDropdown\", \"\", 1, \"dropdown\"], [\"type\", \"button\", \"role\", \"button\", \"ngxDropdownToggle\", \"\", 1, \"btn\", 3, \"ngClass\"], [\"ngxDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenu\", 3, \"click\"], [1, \"dropdown-container\"], [3, \"config\", \"headerTemplate\", \"items\", \"itemTemplate\", \"selectedChange\", \"filterChange\"]], template: function DropdownTreeviewComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵlistener(\"click\", function DropdownTreeviewComponent_Template_div_click_3_listener($event) { return $event.stopPropagation(); });\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"ngx-treeview\", 4);\n            i0.ɵɵlistener(\"selectedChange\", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) { return ctx.onSelectedChange($event); })(\"filterChange\", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) { return ctx.onFilterChange($event); });\n            i0.ɵɵelementEnd()()()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngClass\", ctx.buttonClass);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.buttonLabel, \" \");\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"config\", ctx.config)(\"headerTemplate\", ctx.headerTemplate)(\"items\", ctx.items)(\"itemTemplate\", ctx.itemTemplate);\n        } }, dependencies: [i5.NgClass, TreeviewComponent, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective], styles: [\".dropdown[_ngcontent-%COMP%]{width:100%;display:inline-block}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%;margin-right:.9rem;text-align:left;overflow:hidden;padding-right:30px;text-overflow:ellipsis}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:after{position:absolute;right:.6rem;margin-top:.6rem}.dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]{padding:0 .6rem}\"] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownTreeviewComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-dropdown-treeview', template: \"<div class=\\\"dropdown\\\" ngxDropdown>\\n  <button class=\\\"btn\\\" [ngClass]=\\\"buttonClass\\\" type=\\\"button\\\" role=\\\"button\\\" ngxDropdownToggle>\\n    {{buttonLabel}}\\n  </button>\\n  <div ngxDropdownMenu aria-labelledby=\\\"dropdownMenu\\\" (click)=\\\"$event.stopPropagation()\\\">\\n    <div class=\\\"dropdown-container\\\">\\n      <ngx-treeview [config]=\\\"config\\\" [headerTemplate]=\\\"headerTemplate\\\" [items]=\\\"items\\\" [itemTemplate]=\\\"itemTemplate\\\"\\n        (selectedChange)=\\\"onSelectedChange($event)\\\" (filterChange)=\\\"onFilterChange($event)\\\">\\n      </ngx-treeview>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".dropdown{width:100%;display:inline-block}.dropdown button{width:100%;margin-right:.9rem;text-align:left;overflow:hidden;padding-right:30px;text-overflow:ellipsis}.dropdown button:after{position:absolute;right:.6rem;margin-top:.6rem}.dropdown .dropdown-menu .dropdown-container{padding:0 .6rem}\\n\"] }]\n    }], function () { return [{ type: TreeviewI18n }, { type: TreeviewConfig }]; }, { buttonClass: [{\n            type: Input\n        }], headerTemplate: [{\n            type: Input\n        }], itemTemplate: [{\n            type: Input\n        }], items: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }], selectedChange: [{\n            type: Output\n        }], filterChange: [{\n            type: Output\n        }], treeviewComponent: [{\n            type: ViewChild,\n            args: [TreeviewComponent, { static: false }]\n        }] }); })();\n\nclass TreeviewPipe {\n    transform(objects, textField) {\n        if (isNil(objects)) {\n            return undefined;\n        }\n        return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\n    }\n    static ɵfac = function TreeviewPipe_Factory(t) { return new (t || TreeviewPipe)(); };\n    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"ngxTreeview\", type: TreeviewPipe, pure: true });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'ngxTreeview'\n            }]\n    }], null, null); })();\n\nclass TreeviewModule {\n    static forRoot() {\n        return {\n            ngModule: TreeviewModule,\n            providers: [\n                TreeviewConfig,\n                { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\n                { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\n            ]\n        };\n    }\n    static ɵfac = function TreeviewModule_Factory(t) { return new (t || TreeviewModule)(); };\n    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeviewModule });\n    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [FormsModule,\n            CommonModule] });\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeviewModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormsModule,\n                    CommonModule\n                ],\n                declarations: [\n                    TreeviewComponent,\n                    TreeviewItemComponent,\n                    TreeviewPipe,\n                    DropdownDirective,\n                    DropdownMenuDirective,\n                    DropdownToggleDirective,\n                    DropdownTreeviewComponent\n                ], exports: [\n                    TreeviewComponent,\n                    TreeviewPipe,\n                    DropdownTreeviewComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeviewModule, { declarations: [TreeviewComponent,\n        TreeviewItemComponent,\n        TreeviewPipe,\n        DropdownDirective,\n        DropdownMenuDirective,\n        DropdownToggleDirective,\n        DropdownTreeviewComponent], imports: [FormsModule,\n        CommonModule], exports: [TreeviewComponent,\n        TreeviewPipe,\n        DropdownTreeviewComponent] }); })();\n\n/*\n * Public API Surface of ngx-treeview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultTreeviewEventParser, DefaultTreeviewI18n, DownlineTreeviewEventParser, DropdownDirective, DropdownToggleDirective, DropdownTreeviewComponent, OrderDownlineTreeviewEventParser, TreeviewComponent, TreeviewConfig, TreeviewEventParser, TreeviewHelper, TreeviewI18n, TreeviewItem, TreeviewModule, TreeviewPipe };\n//# sourceMappingURL=ngx-treeview.mjs.map\n","map":null,"preliminaryFileName":"ngx-treeview.mjs","sourcemapFileName":"ngx-treeview.mjs.map"},{"fileName":"ngx-treeview.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngx-treeview.mjs\",\"sources\":[\"../../../projects/ngx-treeview/src/lib/directives/dropdown.directive.ts\",\"../../../projects/ngx-treeview/src/lib/directives/dropdown-menu.directive.ts\",\"../../../projects/ngx-treeview/src/lib/directives/dropdown-toggle.directive.ts\",\"../../../projects/ngx-treeview/src/lib/helpers/treeview-helper.ts\",\"../../../projects/ngx-treeview/src/lib/models/treeview-item.ts\",\"../../../projects/ngx-treeview/src/lib/models/treeview-i18n.ts\",\"../../../projects/ngx-treeview/src/lib/models/treeview-config.ts\",\"../../../projects/ngx-treeview/src/lib/helpers/treeview-event-parser.ts\",\"../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.html\",\"../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.ts\",\"../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.html\",\"../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.ts\",\"../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.ts\",\"../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.html\",\"../../../projects/ngx-treeview/src/lib/pipes/treeview.pipe.ts\",\"../../../projects/ngx-treeview/src/lib/treeview.module.ts\",\"../../../projects/ngx-treeview/src/public-api.ts\",\"../../../projects/ngx-treeview/src/ngx-treeview.ts\"],\"sourcesContent\":[\"import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\\nimport { isNil } from 'lodash';\\n\\n@Directive({\\n  selector: '[ngxDropdown]',\\n  exportAs: 'ngxDropdown'\\n})\\nexport class DropdownDirective {\\n  toggleElement: any;\\n  @Input('open') internalOpen = false;\\n  @Output() openChange = new EventEmitter<boolean>();\\n\\n  @HostBinding('class.show') get isOpen(): boolean {\\n    return this.internalOpen;\\n  }\\n\\n  @HostListener('keyup.esc')\\n  onKeyupEsc(): void {\\n    this.close();\\n  }\\n\\n  @HostListener('document:click', ['$event'])\\n  onDocumentClick(event: MouseEvent): void {\\n    if (event.button !== 2 && !this.isEventFromToggle(event)) {\\n      this.close();\\n    }\\n  }\\n\\n  open(): void {\\n    if (!this.internalOpen) {\\n      this.internalOpen = true;\\n      this.openChange.emit(true);\\n    }\\n  }\\n\\n  close(): void {\\n    if (this.internalOpen) {\\n      this.internalOpen = false;\\n      this.openChange.emit(false);\\n    }\\n  }\\n\\n  toggle(): void {\\n    if (this.isOpen) {\\n      this.close();\\n    } else {\\n      this.open();\\n    }\\n  }\\n\\n  private isEventFromToggle(event: MouseEvent): boolean {\\n    return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\\n  }\\n}\\n\",\"import { Directive, HostBinding } from '@angular/core';\\nimport { DropdownDirective } from './dropdown.directive';\\n\\n@Directive({\\n  selector: '[ngxDropdownMenu]',\\n  host: {\\n    '[class.dropdown-menu]': 'true',\\n    '[class.show]': 'dropdown.isOpen'\\n  }\\n})\\nexport class DropdownMenuDirective {\\n  constructor(\\n    public dropdown: DropdownDirective\\n  ) { }\\n}\\n\",\"import { Directive, ElementRef } from '@angular/core';\\nimport { DropdownDirective } from './dropdown.directive';\\n\\n@Directive({\\n  selector: '[ngxDropdownToggle]',\\n  host: {\\n    class: 'dropdown-toggle',\\n    'aria-haspopup': 'true',\\n    '[attr.aria-expanded]': 'dropdown.isOpen',\\n    '(click)': 'dropdown.toggle()'\\n  }\\n})\\nexport class DropdownToggleDirective {\\n  constructor(\\n    public dropdown: DropdownDirective,\\n    elementRef: ElementRef\\n  ) {\\n    dropdown.toggleElement = elementRef.nativeElement;\\n  }\\n}\\n\",\"import { concat, isNil, pull } from 'lodash';\\nimport { TreeviewItem } from '../models/treeview-item';\\n\\nexport const TreeviewHelper = {\\n  findItem,\\n  findItemInList,\\n  findParent,\\n  removeItem,\\n  concatSelection\\n};\\n\\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\\n  if (isNil(root)) {\\n    return undefined;\\n  }\\n\\n  if (root.value === value) {\\n    return root;\\n  }\\n\\n  if (root.children) {\\n    for (const child of root.children) {\\n      const foundItem = findItem(child, value);\\n      if (foundItem) {\\n        return foundItem;\\n      }\\n    }\\n  }\\n\\n  return undefined;\\n}\\n\\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\\n  if (isNil(list)) {\\n    return undefined;\\n  }\\n\\n  for (const item of list) {\\n    const foundItem = findItem(item, value);\\n    if (foundItem) {\\n      return foundItem;\\n    }\\n  }\\n\\n  return undefined;\\n}\\n\\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\\n  if (isNil(root) || isNil(root.children)) {\\n    return undefined;\\n  }\\n\\n  for (const child of root.children) {\\n    if (child === item) {\\n      return root;\\n    } else {\\n      const parent = findParent(child, item);\\n      if (parent) {\\n        return parent;\\n      }\\n    }\\n  }\\n\\n  return undefined;\\n}\\n\\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\\n  const parent = findParent(root, item);\\n  if (parent) {\\n    pull(parent.children, item);\\n    if (parent.children.length === 0) {\\n      parent.children = undefined;\\n    } else {\\n      parent.correctChecked();\\n    }\\n    return true;\\n  }\\n\\n  return false;\\n}\\n\\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\\n  let checkedItems = [...checked];\\n  let uncheckedItems = [...unchecked];\\n  for (const item of items) {\\n    const selection = item.getSelection();\\n    checkedItems = concat(checkedItems, selection.checkedItems);\\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\\n  }\\n  return {\\n    checked: checkedItems,\\n    unchecked: uncheckedItems\\n  };\\n}\\n\",\"import { isBoolean, isNil, isString } from 'lodash';\\nimport { TreeviewHelper } from '../helpers/treeview-helper';\\n\\nexport interface TreeviewSelection {\\n  checkedItems: TreeviewItem[];\\n  uncheckedItems: TreeviewItem[];\\n}\\n\\nexport interface TreeItem {\\n  text: string;\\n  value: any;\\n  disabled?: boolean;\\n  checked?: boolean;\\n  collapsed?: boolean;\\n  children?: TreeItem[];\\n}\\n\\nexport class TreeviewItem {\\n  private internalDisabled = false;\\n  private internalChecked = true;\\n  private internalCollapsed = false;\\n  private internalChildren: TreeviewItem[];\\n  text: string;\\n  value: any;\\n\\n  constructor(item: TreeItem, autoCorrectChecked = false) {\\n    if (isNil(item)) {\\n      throw new Error('Item must be defined');\\n    }\\n    if (isString(item.text)) {\\n      this.text = item.text;\\n    } else {\\n      throw new Error('A text of item must be string object');\\n    }\\n    this.value = item.value;\\n    if (isBoolean(item.checked)) {\\n      this.checked = item.checked;\\n    }\\n    if (isBoolean(item.collapsed)) {\\n      this.collapsed = item.collapsed;\\n    }\\n    if (isBoolean(item.disabled)) {\\n      this.disabled = item.disabled;\\n    }\\n    if (!isNil(item.children) && item.children.length > 0) {\\n      this.children = item.children.map(child => {\\n        if (this.disabled === true) {\\n          child.disabled = true;\\n        }\\n\\n        return new TreeviewItem(child);\\n      });\\n    }\\n\\n    if (autoCorrectChecked) {\\n      this.correctChecked();\\n    }\\n  }\\n\\n  get checked(): boolean {\\n    return this.internalChecked;\\n  }\\n\\n  set checked(value: boolean) {\\n    if (!this.internalDisabled) {\\n      if (this.internalChecked !== value) {\\n        this.internalChecked = value;\\n      }\\n    }\\n  }\\n\\n  get indeterminate(): boolean {\\n    return this.checked === undefined;\\n  }\\n\\n  setCheckedRecursive(value: boolean): void {\\n    if (!this.internalDisabled) {\\n      this.internalChecked = value;\\n      if (!isNil(this.internalChildren)) {\\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\\n      }\\n    }\\n  }\\n\\n  get disabled(): boolean {\\n    return this.internalDisabled;\\n  }\\n\\n  set disabled(value: boolean) {\\n    if (this.internalDisabled !== value) {\\n      this.internalDisabled = value;\\n      if (!isNil(this.internalChildren)) {\\n        this.internalChildren.forEach(child => child.disabled = value);\\n      }\\n    }\\n  }\\n\\n  get collapsed(): boolean {\\n    return this.internalCollapsed;\\n  }\\n\\n  set collapsed(value: boolean) {\\n    if (this.internalCollapsed !== value) {\\n      this.internalCollapsed = value;\\n    }\\n  }\\n\\n  setCollapsedRecursive(value: boolean): void {\\n    this.internalCollapsed = value;\\n    if (!isNil(this.internalChildren)) {\\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\\n    }\\n  }\\n\\n  get children(): TreeviewItem[] {\\n    return this.internalChildren;\\n  }\\n\\n  set children(value: TreeviewItem[]) {\\n    if (this.internalChildren !== value) {\\n      if (!isNil(value) && value.length === 0) {\\n        throw new Error('Children must be not an empty array');\\n      }\\n      this.internalChildren = value;\\n      if (!isNil(this.internalChildren)) {\\n        let checked = null;\\n        this.internalChildren.forEach(child => {\\n          if (checked === null) {\\n            checked = child.checked;\\n          } else {\\n            if (child.checked !== checked) {\\n              checked = undefined;\\n              return;\\n            }\\n          }\\n        });\\n        this.internalChecked = checked;\\n      }\\n    }\\n  }\\n\\n  getSelection(): TreeviewSelection {\\n    let checkedItems: TreeviewItem[] = [];\\n    let uncheckedItems: TreeviewItem[] = [];\\n    if (isNil(this.internalChildren)) {\\n      if (this.internalChecked) {\\n        checkedItems.push(this);\\n      } else {\\n        uncheckedItems.push(this);\\n      }\\n    } else {\\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\\n      checkedItems = selection.checked;\\n      uncheckedItems = selection.unchecked;\\n    }\\n\\n    return {\\n      checkedItems,\\n      uncheckedItems\\n    };\\n  }\\n\\n  correctChecked(): void {\\n    this.internalChecked = this.getCorrectChecked();\\n  }\\n\\n  private getCorrectChecked(): boolean {\\n    let checked: boolean = null;\\n    if (!isNil(this.internalChildren)) {\\n      for (const child of this.internalChildren) {\\n        child.internalChecked = child.getCorrectChecked();\\n        if (checked === null) {\\n          checked = child.internalChecked;\\n        } else if (checked !== child.internalChecked) {\\n          checked = undefined;\\n          break;\\n        }\\n      }\\n    } else {\\n      checked = this.checked;\\n    }\\n\\n    return checked;\\n  }\\n}\\n\",\"import { Injectable } from '@angular/core';\\nimport { TreeviewSelection } from './treeview-item';\\n\\n@Injectable()\\nexport abstract class TreeviewI18n {\\n  abstract getText(selection: TreeviewSelection): string;\\n  abstract getAllCheckboxText(): string;\\n  abstract getFilterPlaceholder(): string;\\n  abstract getFilterNoItemsFoundText(): string;\\n  abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\\n}\\n\\n@Injectable()\\nexport class DefaultTreeviewI18n extends TreeviewI18n {\\n  getText(selection: TreeviewSelection): string {\\n    if (selection.uncheckedItems.length === 0) {\\n      if (selection.checkedItems.length > 0) {\\n        return this.getAllCheckboxText();\\n      } else {\\n        return '';\\n      }\\n    }\\n\\n    switch (selection.checkedItems.length) {\\n      case 0:\\n        return 'Select options';\\n      case 1:\\n        return selection.checkedItems[0].text;\\n      default:\\n        return `${selection.checkedItems.length} options selected`;\\n    }\\n  }\\n\\n  getAllCheckboxText(): string {\\n    return 'All';\\n  }\\n\\n  getFilterPlaceholder(): string {\\n    return 'Filter';\\n  }\\n\\n  getFilterNoItemsFoundText(): string {\\n    return 'No items found';\\n  }\\n\\n  getTooltipCollapseExpandText(isCollapse: boolean): string {\\n    return isCollapse ? 'Expand' : 'Collapse';\\n  }\\n}\\n\",\"import { Injectable } from '@angular/core';\\n\\n@Injectable()\\nexport class TreeviewConfig {\\n  hasAllCheckBox = true;\\n  hasFilter = false;\\n  hasCollapseExpand = false;\\n  decoupleChildFromParent = false;\\n  maxHeight = 500;\\n\\n  get hasDivider(): boolean {\\n    return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\\n  }\\n\\n  public static create(fields?: {\\n    hasAllCheckBox?: boolean,\\n    hasFilter?: boolean,\\n    hasCollapseExpand?: boolean,\\n    decoupleChildFromParent?: boolean\\n    maxHeight?: number,\\n  }): TreeviewConfig {\\n    const config = new TreeviewConfig();\\n    Object.assign(config, fields);\\n    return config;\\n  }\\n}\\n\",\"import { Injectable } from '@angular/core';\\nimport { isNil } from 'lodash';\\nimport { TreeviewItem } from '../models/treeview-item';\\nimport { TreeviewComponent } from '../components/treeview/treeview.component';\\n\\n@Injectable()\\nexport abstract class TreeviewEventParser {\\n  abstract getSelectedChange(component: TreeviewComponent): any[];\\n}\\n\\n@Injectable()\\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\\n  getSelectedChange(component: TreeviewComponent): any[] {\\n    const checkedItems = component.selection.checkedItems;\\n    if (!isNil(checkedItems)) {\\n      return checkedItems.map(item => item.value);\\n    }\\n\\n    return [];\\n  }\\n}\\n\\nexport interface DownlineTreeviewItem {\\n  item: TreeviewItem;\\n  parent: DownlineTreeviewItem;\\n}\\n\\n@Injectable()\\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\\n  getSelectedChange(component: TreeviewComponent): any[] {\\n    const items = component.items;\\n    if (!isNil(items)) {\\n      let result: DownlineTreeviewItem[] = [];\\n      items.forEach(item => {\\n        const links = this.getLinks(item, null);\\n        if (!isNil(links)) {\\n          result = result.concat(links);\\n        }\\n      });\\n\\n      return result;\\n    }\\n\\n    return [];\\n  }\\n\\n  private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\\n    if (!isNil(item.children)) {\\n      const link = {\\n        item,\\n        parent\\n      };\\n      let result: DownlineTreeviewItem[] = [];\\n      item.children.forEach(child => {\\n        const links = this.getLinks(child, link);\\n        if (!isNil(links)) {\\n          result = result.concat(links);\\n        }\\n      });\\n\\n      return result;\\n    }\\n\\n    if (item.checked) {\\n      return [{\\n        item,\\n        parent\\n      }];\\n    }\\n\\n    return null;\\n  }\\n}\\n\\n@Injectable()\\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\\n  private currentDownlines: DownlineTreeviewItem[] = [];\\n  private parser = new DownlineTreeviewEventParser();\\n\\n  getSelectedChange(component: TreeviewComponent): any[] {\\n    const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\\n    if (this.currentDownlines.length === 0) {\\n      this.currentDownlines = newDownlines;\\n    } else {\\n      const intersectDownlines: DownlineTreeviewItem[] = [];\\n      this.currentDownlines.forEach(downline => {\\n        let foundIndex = -1;\\n        const length = newDownlines.length;\\n        for (let i = 0; i < length; i++) {\\n          if (downline.item.value === newDownlines[i].item.value) {\\n            foundIndex = i;\\n            break;\\n          }\\n        }\\n\\n        if (foundIndex !== -1) {\\n          intersectDownlines.push(newDownlines[foundIndex]);\\n          newDownlines.splice(foundIndex, 1);\\n        }\\n      });\\n\\n      this.currentDownlines = intersectDownlines.concat(newDownlines);\\n    }\\n\\n    return this.currentDownlines;\\n  }\\n}\\n\",\"<div *ngIf=\\\"item\\\" class=\\\"treeview-item\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"template\\\"\\n    [ngTemplateOutletContext]=\\\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\\\">\\n  </ng-template>\\n  <div *ngIf=\\\"!item.collapsed\\\">\\n    <ngx-treeview-item [config]=\\\"config\\\" *ngFor=\\\"let child of item.children\\\" [item]=\\\"child\\\" [template]=\\\"template\\\"\\n      (checkedChange)=\\\"onChildCheckedChange(child, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n</div>\\n\",\"import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\\nimport { isNil } from 'lodash';\\nimport { TreeviewItem } from '../../models/treeview-item';\\nimport { TreeviewConfig } from '../../models/treeview-config';\\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\\n\\n@Component({\\n  selector: 'ngx-treeview-item',\\n  templateUrl: './treeview-item.component.html',\\n  styleUrls: ['./treeview-item.component.scss']\\n})\\nexport class TreeviewItemComponent {\\n  @Input() config: TreeviewConfig;\\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\\n  @Input() item: TreeviewItem;\\n  @Output() checkedChange = new EventEmitter<boolean>();\\n\\n  constructor(\\n    private defaultConfig: TreeviewConfig\\n  ) {\\n    this.config = this.defaultConfig;\\n  }\\n\\n  onCollapseExpand = () => {\\n    this.item.collapsed = !this.item.collapsed;\\n  }\\n\\n  onCheckedChange = () => {\\n    const checked = this.item.checked;\\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\\n    }\\n    this.checkedChange.emit(checked);\\n  }\\n\\n  onChildCheckedChange(child: TreeviewItem, checked: boolean): void {\\n    if (!this.config.decoupleChildFromParent) {\\n      let itemChecked: boolean = null;\\n      for (const childItem of this.item.children) {\\n        if (itemChecked === null) {\\n          itemChecked = childItem.checked;\\n        } else if (itemChecked !== childItem.checked) {\\n          itemChecked = undefined;\\n          break;\\n        }\\n      }\\n\\n      if (itemChecked === null) {\\n        itemChecked = false;\\n      }\\n\\n      if (this.item.checked !== itemChecked) {\\n        this.item.checked = itemChecked;\\n      }\\n\\n    }\\n\\n    this.checkedChange.emit(checked);\\n  }\\n}\\n\",\"<ng-template #defaultItemTemplate let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\">\\n  <div class=\\\"form-inline row-item\\\">\\n    <i *ngIf=\\\"item.children\\\" (click)=\\\"onCollapseExpand()\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n      <svg *ngSwitchCase=\\\"true\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-right-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\\\" />\\n      </svg>\\n      <svg *ngSwitchCase=\\\"false\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-down-fill\\\"\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\\\" />\\n      </svg>\\n    </i>\\n    <div class=\\\"form-check\\\">\\n      <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n        [disabled]=\\\"item.disabled\\\" [indeterminate]=\\\"item.indeterminate\\\" />\\n      <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n        {{item.text}}\\n      </label>\\n    </div>\\n  </div>\\n</ng-template>\\n<ng-template #defaultHeaderTemplate let-config=\\\"config\\\" let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n  let-onCheckedChange=\\\"onCheckedChange\\\" let-onFilterTextChange=\\\"onFilterTextChange\\\">\\n  <div *ngIf=\\\"config.hasFilter\\\" class=\\\"row row-filter\\\">\\n    <div class=\\\"col-12\\\">\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"i18n.getFilterPlaceholder()\\\" [(ngModel)]=\\\"filterText\\\"\\n        (ngModelChange)=\\\"onFilterTextChange($event)\\\" />\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"hasFilterItems\\\">\\n    <div *ngIf=\\\"config.hasAllCheckBox || config.hasCollapseExpand\\\" class=\\\"row row-all\\\">\\n      <div class=\\\"col-12\\\">\\n        <div class=\\\"form-check form-check-inline\\\" *ngIf=\\\"config.hasAllCheckBox\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n            [indeterminate]=\\\"item.indeterminate\\\" />\\n          <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n            {{i18n.getAllCheckboxText()}}\\n          </label>\\n        </div>\\n        <label *ngIf=\\\"config.hasCollapseExpand\\\" class=\\\"float-right form-check-label\\\" (click)=\\\"onCollapseExpand()\\\">\\n          <i [title]=\\\"i18n.getTooltipCollapseExpandText(item.collapsed)\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\n            <svg *ngSwitchCase=\\\"true\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-expand\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n            <svg *ngSwitchCase=\\\"false\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-contract\\\"\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\n              <path fill-rule=\\\"evenodd\\\"\\n                d=\\\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\n            </svg>\\n          </i>\\n        </label>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"config.hasDivider\\\" class=\\\"dropdown-divider\\\"></div>\\n  </div>\\n</ng-template>\\n<div class=\\\"treeview-header\\\">\\n  <ng-template [ngTemplateOutlet]=\\\"headerTemplate || defaultHeaderTemplate\\\"\\n    [ngTemplateOutletContext]=\\\"headerTemplateContext\\\">\\n  </ng-template>\\n</div>\\n<div [ngSwitch]=\\\"hasFilterItems\\\">\\n  <div *ngSwitchCase=\\\"true\\\" class=\\\"treeview-container\\\" [style.max-height.px]=\\\"maxHeight\\\">\\n    <ngx-treeview-item *ngFor=\\\"let item of filterItems\\\" [config]=\\\"config\\\" [item]=\\\"item\\\"\\n      [template]=\\\"itemTemplate || defaultItemTemplate\\\" (checkedChange)=\\\"onItemCheckedChange(item, $event)\\\">\\n    </ngx-treeview-item>\\n  </div>\\n  <div *ngSwitchCase=\\\"false\\\" class=\\\"treeview-text\\\">\\n    {{i18n.getFilterNoItemsFoundText()}}\\n  </div>\\n</div>\\n\",\"import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef, OnInit } from '@angular/core';\\nimport { isNil, includes } from 'lodash';\\nimport { TreeviewI18n } from '../../models/treeview-i18n';\\nimport { TreeviewItem, TreeviewSelection } from '../../models/treeview-item';\\nimport { TreeviewConfig } from '../../models/treeview-config';\\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\\nimport { TreeviewHelper } from '../../helpers/treeview-helper';\\nimport { TreeviewEventParser } from '../../helpers/treeview-event-parser';\\n\\nclass FilterTreeviewItem extends TreeviewItem {\\n  private readonly refItem: TreeviewItem;\\n  constructor(item: TreeviewItem) {\\n    super({\\n      text: item.text,\\n      value: item.value,\\n      disabled: item.disabled,\\n      checked: item.checked,\\n      collapsed: item.collapsed,\\n      children: item.children\\n    });\\n    this.refItem = item;\\n  }\\n\\n  updateRefChecked(): void {\\n    this.children.forEach(child => {\\n      if (child instanceof FilterTreeviewItem) {\\n        child.updateRefChecked();\\n      }\\n    });\\n\\n    let refChecked = this.checked;\\n    if (refChecked) {\\n      for (const refChild of this.refItem.children) {\\n        if (!refChild.checked) {\\n          refChecked = false;\\n          break;\\n        }\\n      }\\n    }\\n    this.refItem.checked = refChecked;\\n  }\\n}\\n\\n@Component({\\n  selector: 'ngx-treeview',\\n  templateUrl: './treeview.component.html',\\n  styleUrls: ['./treeview.component.scss']\\n})\\nexport class TreeviewComponent implements OnChanges, OnInit {\\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\\n  @Input() items: TreeviewItem[];\\n  @Input() config: TreeviewConfig;\\n  @Output() selectedChange = new EventEmitter<any[]>();\\n  @Output() filterChange = new EventEmitter<string>();\\n  headerTemplateContext: TreeviewHeaderTemplateContext;\\n  allItem: TreeviewItem;\\n  filterText = '';\\n  filterItems: TreeviewItem[];\\n  selection: TreeviewSelection;\\n\\n  constructor(\\n    public i18n: TreeviewI18n,\\n    private defaultConfig: TreeviewConfig,\\n    private eventParser: TreeviewEventParser\\n  ) {\\n    this.config = this.defaultConfig;\\n    this.allItem = new TreeviewItem({ text: 'All', value: undefined });\\n  }\\n\\n  get hasFilterItems(): boolean {\\n    return !isNil(this.filterItems) && this.filterItems.length > 0;\\n  }\\n\\n  get maxHeight(): string {\\n    return `${this.config.maxHeight}`;\\n  }\\n\\n  ngOnInit(): void {\\n    this.createHeaderTemplateContext();\\n    this.generateSelection();\\n  }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    const itemsSimpleChange = changes.items;\\n    if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\\n      this.updateFilterItems();\\n      this.updateCollapsedOfAll();\\n      this.raiseSelectedChange();\\n    }\\n  }\\n\\n  onAllCollapseExpand(): void {\\n    this.allItem.collapsed = !this.allItem.collapsed;\\n    this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\\n  }\\n\\n  onFilterTextChange(text: string): void {\\n    this.filterText = text;\\n    this.filterChange.emit(text);\\n    this.updateFilterItems();\\n  }\\n\\n  onAllCheckedChange(): void {\\n    const checked = this.allItem.checked;\\n    this.filterItems.forEach(item => {\\n      item.setCheckedRecursive(checked);\\n      if (item instanceof FilterTreeviewItem) {\\n        item.updateRefChecked();\\n      }\\n    });\\n\\n    this.raiseSelectedChange();\\n  }\\n\\n  onItemCheckedChange(item: TreeviewItem, checked: boolean): void {\\n    if (item instanceof FilterTreeviewItem) {\\n      item.updateRefChecked();\\n    }\\n\\n    this.updateCheckedOfAll();\\n    this.raiseSelectedChange();\\n  }\\n\\n  raiseSelectedChange(): void {\\n    this.generateSelection();\\n    const values = this.eventParser.getSelectedChange(this);\\n    setTimeout(() => {\\n      this.selectedChange.emit(values);\\n    });\\n  }\\n\\n  private createHeaderTemplateContext(): void {\\n    this.headerTemplateContext = {\\n      config: this.config,\\n      item: this.allItem,\\n      onCheckedChange: () => this.onAllCheckedChange(),\\n      onCollapseExpand: () => this.onAllCollapseExpand(),\\n      onFilterTextChange: (text) => this.onFilterTextChange(text)\\n    };\\n  }\\n\\n  private generateSelection(): void {\\n    let checkedItems: TreeviewItem[] = [];\\n    let uncheckedItems: TreeviewItem[] = [];\\n    if (!isNil(this.items)) {\\n      const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\\n      checkedItems = selection.checked;\\n      uncheckedItems = selection.unchecked;\\n    }\\n\\n    this.selection = {\\n      checkedItems,\\n      uncheckedItems\\n    };\\n  }\\n\\n  private updateFilterItems(): void {\\n    if (this.filterText !== '') {\\n      const filterItems: TreeviewItem[] = [];\\n      const filterText = this.filterText.toLowerCase();\\n      this.items.forEach(item => {\\n        const newItem = this.filterItem(item, filterText);\\n        if (!isNil(newItem)) {\\n          filterItems.push(newItem);\\n        }\\n      });\\n      this.filterItems = filterItems;\\n    } else {\\n      this.filterItems = this.items;\\n    }\\n\\n    this.updateCheckedOfAll();\\n  }\\n\\n  private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\\n    const isMatch = includes(item.text.toLowerCase(), filterText);\\n    if (isMatch) {\\n      return item;\\n    } else {\\n      if (!isNil(item.children)) {\\n        const children: TreeviewItem[] = [];\\n        item.children.forEach(child => {\\n          const newChild = this.filterItem(child, filterText);\\n          if (!isNil(newChild)) {\\n            children.push(newChild);\\n          }\\n        });\\n        if (children.length > 0) {\\n          const newItem = new FilterTreeviewItem(item);\\n          newItem.collapsed = false;\\n          newItem.children = children;\\n          return newItem;\\n        }\\n      }\\n    }\\n\\n    return undefined;\\n  }\\n\\n  private updateCheckedOfAll(): void {\\n    let itemChecked: boolean = null;\\n    for (const filterItem of this.filterItems) {\\n      if (itemChecked === null) {\\n        itemChecked = filterItem.checked;\\n      } else if (itemChecked !== filterItem.checked) {\\n        itemChecked = undefined;\\n        break;\\n      }\\n    }\\n\\n    if (itemChecked === null) {\\n      itemChecked = false;\\n    }\\n\\n    this.allItem.checked = itemChecked;\\n  }\\n\\n  private updateCollapsedOfAll(): void {\\n    let hasItemExpanded = false;\\n    for (const filterItem of this.filterItems) {\\n      if (!filterItem.collapsed) {\\n        hasItemExpanded = true;\\n        break;\\n      }\\n    }\\n\\n    this.allItem.collapsed = !hasItemExpanded;\\n  }\\n}\\n\",\"import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';\\nimport { TreeviewI18n } from '../../models/treeview-i18n';\\nimport { TreeviewItem } from '../../models/treeview-item';\\nimport { TreeviewConfig } from '../../models/treeview-config';\\nimport { TreeviewComponent } from '../treeview/treeview.component';\\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\\n\\n@Component({\\n  selector: 'ngx-dropdown-treeview',\\n  templateUrl: './dropdown-treeview.component.html',\\n  styleUrls: ['./dropdown-treeview.component.scss']\\n})\\nexport class DropdownTreeviewComponent {\\n  @Input() buttonClass = 'btn-outline-secondary';\\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\\n  @Input() items: TreeviewItem[];\\n  @Input() config: TreeviewConfig;\\n  @Output() selectedChange = new EventEmitter<any[]>(true);\\n  @Output() filterChange = new EventEmitter<string>();\\n  @ViewChild(TreeviewComponent, { static: false }) treeviewComponent: TreeviewComponent;\\n  buttonLabel: string;\\n\\n  constructor(\\n    public i18n: TreeviewI18n,\\n    private defaultConfig: TreeviewConfig\\n  ) {\\n    this.config = this.defaultConfig;\\n  }\\n\\n  onSelectedChange(values: any[]): void {\\n    this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\\n    this.selectedChange.emit(values);\\n  }\\n\\n  onFilterChange(text: string): void {\\n    this.filterChange.emit(text);\\n  }\\n}\\n\",\"<div class=\\\"dropdown\\\" ngxDropdown>\\n  <button class=\\\"btn\\\" [ngClass]=\\\"buttonClass\\\" type=\\\"button\\\" role=\\\"button\\\" ngxDropdownToggle>\\n    {{buttonLabel}}\\n  </button>\\n  <div ngxDropdownMenu aria-labelledby=\\\"dropdownMenu\\\" (click)=\\\"$event.stopPropagation()\\\">\\n    <div class=\\\"dropdown-container\\\">\\n      <ngx-treeview [config]=\\\"config\\\" [headerTemplate]=\\\"headerTemplate\\\" [items]=\\\"items\\\" [itemTemplate]=\\\"itemTemplate\\\"\\n        (selectedChange)=\\\"onSelectedChange($event)\\\" (filterChange)=\\\"onFilterChange($event)\\\">\\n      </ngx-treeview>\\n    </div>\\n  </div>\\n</div>\\n\",\"import { Pipe, PipeTransform } from '@angular/core';\\nimport { isNil } from 'lodash';\\nimport { TreeviewItem } from '../models/treeview-item';\\n\\n@Pipe({\\n  name: 'ngxTreeview'\\n})\\nexport class TreeviewPipe implements PipeTransform {\\n  transform(objects: any[], textField: string): TreeviewItem[] {\\n    if (isNil(objects)) {\\n      return undefined;\\n    }\\n\\n    return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\\n  }\\n}\\n\",\"import { NgModule, ModuleWithProviders } from '@angular/core';\\nimport { FormsModule } from '@angular/forms';\\nimport { CommonModule } from '@angular/common';\\nimport { DropdownDirective } from './directives/dropdown.directive';\\nimport { DropdownMenuDirective } from './directives/dropdown-menu.directive';\\nimport { DropdownToggleDirective } from './directives/dropdown-toggle.directive';\\nimport { DropdownTreeviewComponent } from './components/dropdown-treeview/dropdown-treeview.component';\\nimport { TreeviewComponent } from './components/treeview/treeview.component';\\nimport { TreeviewItemComponent } from './components/treeview-item/treeview-item.component';\\nimport { TreeviewPipe } from './pipes/treeview.pipe';\\nimport { TreeviewI18n, DefaultTreeviewI18n } from './models/treeview-i18n';\\nimport { TreeviewConfig } from './models/treeview-config';\\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './helpers/treeview-event-parser';\\n\\n@NgModule({\\n  imports: [\\n    FormsModule,\\n    CommonModule\\n  ],\\n  declarations: [\\n    TreeviewComponent,\\n    TreeviewItemComponent,\\n    TreeviewPipe,\\n    DropdownDirective,\\n    DropdownMenuDirective,\\n    DropdownToggleDirective,\\n    DropdownTreeviewComponent\\n  ], exports: [\\n    TreeviewComponent,\\n    TreeviewPipe,\\n    DropdownTreeviewComponent\\n  ]\\n})\\nexport class TreeviewModule {\\n  static forRoot(): ModuleWithProviders<TreeviewModule> {\\n    return {\\n      ngModule: TreeviewModule,\\n      providers: [\\n        TreeviewConfig,\\n        { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\\n        { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\\n      ]\\n    };\\n  }\\n}\\n\",\"/*\\n * Public API Surface of ngx-treeview\\n */\\n\\nexport * from './lib/treeview.module';\\nexport * from './lib/components/treeview/treeview.component';\\nexport * from './lib/components/dropdown-treeview/dropdown-treeview.component';\\nexport * from './lib/pipes/treeview.pipe';\\nexport * from './lib/directives/dropdown-toggle.directive';\\nexport * from './lib/directives/dropdown.directive';\\nexport * from './lib/models/treeview-item';\\nexport * from './lib/models/treeview-config';\\nexport * from './lib/models/treeview-i18n';\\nexport * from './lib/models/treeview-item-template-context';\\nexport * from './lib/helpers/treeview-event-parser';\\nexport * from './lib/helpers/treeview-helper';\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1.DropdownDirective\",\"i1.TreeviewConfig\",\"i1.TreeviewI18n\",\"i2.TreeviewConfig\",\"i3.TreeviewEventParser\"],\"mappings\":\"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\"}","type":"asset"}]}